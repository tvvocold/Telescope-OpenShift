{
  "name": "mailchimp",
  "version": "1.1.0",
  "description": "A node.js wrapper for the MailChimp API.",
  "author": {
    "name": "Daniel Leinich",
    "email": "leinich@gmx.net"
  },
  "keywords": [
    "mailchimp",
    "mailchimp api",
    "email",
    "mail",
    "newsletter",
    "mandrill"
  ],
  "main": "./lib/mailchimp",
  "repository": {
    "type": "git",
    "url": "http://github.com/gomfunkel/node-mailchimp.git"
  },
  "dependencies": {
    "request": "2.x.x",
    "qs": "0.5.x"
  },
  "devDependencies": {
    "vows": "0.6.x",
    "nock": "0.13.x"
  },
  "readme": "# node-mailchimp\n\nA node.js wrapper for the MailChimp API.\n\n_node-mailchimp_ exposes the following features of the MailChimp API to your node.js application:\n \n * MailChimp API (Versions 2.0, 1.3, 1.2 and 1.1)\n * MailChimp Export API (Version 1.0)\n * MailChimp Webhooks\n * MailChimp OAuth2 authorization\n * MailChimp Partner API (Version 1.3)\n * Mandrill API (Version 1.0)\n\nFurther information on the MailChimp API and its features is available at [http://apidocs.mailchimp.com](http://apidocs.mailchimp.com). If you want to know more about the Mandrill API and its features have a look at [https://mandrillapp.com/api/docs/](https://mandrillapp.com/api/docs/).\n\n## Installation\n\nInstalling using npm (node package manager):\n\n    npm install mailchimp\n    \nIf you don't have npm installed or don't want to use it:\n\n    cd ~/.node_libraries\n    git clone git://github.com/gomfunkel/node-mailchimp.git mailchimp\n\nPlease note that parts of _node-mailchimp_ depend on [request](http://github.com/mikeal/request) by [Mikeal Rogers](http://github.com/mikeal). This library needs to be installed for the API and Export API to work. Additionally [node-querystring](http://github.com/visionmedia/node-querystring) is needed for the Webhooks to work. If you are using npm all dependencies should be automagically resolved for you.\n\n## Usage\n\nInformation on how to use the MailChimp APIs can be found below. Further information on the API methods available can be found at [http://apidocs.mailchimp.com](http://apidocs.mailchimp.com). You can also find further information on how to obtain an API key, how to set up Webhooks and/or OAuth2 in your MailChimp account and much more on the MailChimp API pages.\n\nSome methods of the MailChimp API take associative arrays as a parameter, for example the parameter `merge_vars` of the [`listSubscribe`](http://apidocs.mailchimp.com/api/1.3/listsubscribe.func.php) method. As there are no associative arrays in JavaScript you simply use an object with its properties being the keys, like in the following example:\n\n```javascript\nvar merge_vars = {\n\tEMAIL: '/* E-MAIL ADDRESS */',\n\tFNAME: '/* FIRST NAME */',\n\tLNAME: '/* LAST NAME */'\n};\n```\n\n### MailChimp API (when using MailChimp API version 2.0)\n\n__Attention__: Support for v2.0 of the MailChimp API is not yet well tested. Please use with caution. When in doubt, stick to older versions of the API (v1.x) and skip to the next chapter for documentation.\n\n_MailChimpAPI_ takes two arguments. The first argument is your API key, which you can find in your MailChimp Account. The second argument is an options object which can contain the following options:\n\n * `version` The API version to use (1.1, 1.2, 1.3 or 2.0). Defaults to 1.3. Make sure to explicitly use 2.0 here or refer to the next chapter for documentation on older API versions.\n * `userAgent` Custom User-Agent description to use in the request header.\n\nAll of the API categories and methods described in the MailChimp API v2.0 Documentation ([http://apidocs.mailchimp.com/api/2.0](http://apidocs.mailchimp.com/api/2.0) are available in this wrapper. To use them the method `call` is used which takes four parameters:\n\n * `section` The section of the API method to call (e.g. 'campaigns').\n * `method` The method to call in the given section.\n * `params` Parameters to pass to the API method.\n * `callback` Callback function for returned data or errors with two parameters. The first one being an error object which is null when no error occured, the second one an object with all information retrieved as long as no error occured.\n\nExample:\n\n```javascript\nvar MailChimpAPI = require('mailchimp').MailChimpAPI;\n\nvar apiKey = 'Your MailChimpAPI API Key';\n\ntry { \n    var api = new MailChimpAPI(apiKey, { version : '2.0' });\n} catch (error) {\n    console.log(error.message);\n}\n\napi.call('campaigns', 'list', { start: 0, limit: 25 }, function (error, data) {\n    if (error)\n        console.log(error.message);\n    else\n        console.log(JSON.stringify(data)); // Do something with your data!\n});\n\napi.call('campaigns', 'template-content', { cid: '/* CAMPAIGN ID */ }, function (error, data) {\n    if (error)\n        console.log(error.message);\n    else\n        console.log(JSON.stringify(data)); // Do something with your data!\n});\n```\n\n### MailChimp API (when using MailChimp API version 1.x)\n\n_MailChimpAPI_ takes two arguments. The first argument is your API key, which you can find in your MailChimp Account. The second argument is an options object which can contain the following options:\n\n * `version` The API version to use (1.1, 1.2, 1.3 or 2.0). Defaults to 1.3.\n * `secure` Whether or not to use secure connections over HTTPS (true/false). Defaults to false.\n * `userAgent` Custom User-Agent description to use in the request header.\n \nThe callback function for each API method gets two arguments. The first one is an error object which is null when no error occured, the second one an object with all information retrieved as long as no error occured.\n\nExample:\n\n```javascript\nvar MailChimpAPI = require('mailchimp').MailChimpAPI;\n\nvar apiKey = 'Your MailChimp API Key';\n\ntry { \n    var api = new MailChimpAPI(apiKey, { version : '1.3', secure : false });\n} catch (error) {\n    console.log(error.message);\n}\n\napi.campaigns({ start: 0, limit: 25 }, function (error, data) {\n    if (error)\n        console.log(error.message);\n    else\n        console.log(JSON.stringify(data)); // Do something with your data!\n});\n\napi.campaignStats({ cid : '/* CAMPAIGN ID */' }, function (error, data) {\n    if (error)\n        console.log(error.message);\n    else\n        console.log(JSON.stringify(data)); // Do something with your data!\n});\n```\n\n### MailChimp Export API\n\n_MailChimpExportAPI_ takes two arguments. The first argument is your API key, which you can find in your MailChimp Account. The second argument is an options object which can contain the following options:\n\n * `version` The Export API version to use, currently only 1.0 is available and supported. Defaults to 1.0.\n * `secure` Whether or not to use secure connections over HTTPS (true/false). Defaults to false.\n * `userAgent` Custom User-Agent description to use in the request header.\n \nThe callback function for each API method gets two arguments. The first one is an error object which is null when no error occured, the second one an object with all information retrieved as long as no error occured. \n\nExample:\n\n```javascript\nvar MailChimpExportAPI = require('mailchimp').MailChimpExportAPI;\n\nvar apiKey = 'Your MailChimp API Key';\n\ntry { \n    var exportApi = new MailChimpExportAPI(apiKey, { version : '1.0', secure: false });\n} catch (error) {\n    console.log(error.message);\n}\n\nexportApi.list({ id : '/* LIST ID */'  }, function (error, data) {\n    if (error)\n        console.log(error.message);\n    else\n        console.log(JSON.stringify(data)); // Do something with your data!\n});\n```\n    \n### MailChimp Webhooks\n\n_MailChimpWebhook_ takes one argument, an options object which can contain the following options:\n\n * `port` The port the server is going to listen on. Defaults to 8100.\n * `secret` Secret key as suggested on the Webhook page which is then simply added as a pathname to the Webhook URL in your MailChimp account and checked for. Nothing too fancy but a small enhancement to security. Leave empty (default setting) if you don't want to use a secret key. Example: If you set the secret to 'ChimpSecret' you need to enter the Webhook URL http://www.yourdomain.com/ChimpSecret in the MailChimp Webhook settings.\n * `secure` Credentials as generated by the crypto module. If present HTTPS support is enabled for the server. Defaults to false. \n\nYou can register the following events. The callback function for each of these events receive two arguments. The first argument is an object with the information retrieved, the second argument contains metadata like when the event occurred.\n\n * `subscribe` Emitted when someone subscribes to your list.\n * `unsubscribe` Emitted when someone unsubscribes from your list.\n * `profile` Emitted when someone updates his profile.\n * `upemail` Emitted when someone changes his email address. Please note that you will receive a `profile` event at the same time.\n * `cleaned` Emitted when an email address is cleaned from you list.\n  \nExample:\n\n```javascript\nvar MailChimpWebhook = require('mailchimp').MailChimpWebhook;\n\nvar webhook = new MailChimpWebhook();\n\nwebhook.on('error', function (error) {\n    console.log(error.message);\n});\n\nwebhook.on('subscribe', function (data, meta) {\n    console.log(data.email+' subscribed to your newsletter!'); // Do something with your data!\n});\n\nwebhook.on('unsubscribe', function (data, meta) {\n    console.log(data.email+' unsubscribed from your newsletter!'); // Do something with your data!\n});\n```\n\n### MailChimp OAuth2\n\n_MailChimpOAuth_ takes one argument, an options object which can contain the following options:\n\n * `clientId` The clientId can be obtained from MailChimp, please refer to the API docs on how to do this. The clientId is a required parameter.\n * `clientSecret` The clientSecret can be obtained from MailChimp, please refer to the API docs on how to do this. The clientSecret is a required parameter. \n * `serverUri` The URI to reach this server from the internet. This URI is required as MailChimp sends a request upon successful authorization of a user.\n * `redirectUri` After a successful authorization on the MailChimp website the user is redirected to this URI, if any. \n * `port` The port the server is going to listen on. Defaults to 8100.\n * `secure` Credentials as generated by the crypto module. If present HTTPS support is enabled for the server. Defaults to false. \n\nYou can register the following events:\n\n * `error` This event is emitted when an error occured and receives one argument that contains the error message.\n * `authed` Emitted when the OAuth was completed successfully. Receives one argument which represents the API key that can be passed on to other API functionality.\n  \nExample:\n\n```javascript\nvar MailChimpOAuth = require('mailchimp').MailChimpOAuth;\nvar MailChimpAPI = require('mailchimp').MailChimpAPI;\n\nvar options = {\n\tclientId: 'Your MailChimp client id',\n\tclientSecret: 'Your MailChimp client secret',\n\tserverUri: 'http://www.example.com',\n\tredirectUri: 'http://www.example.com/successfulLogin.html'\n};\n\nvar oauth = new MailChimpOAuth(options);\n\nconsole.log(oauth.getAuthorizeUri()); // The MailChimp login URI the user needs to be sent to\n\noauth.on('error', function (error) {\n    console.log(error.message);\n});\n\noauth.on('authed', function (apiKey) {\n\t\n\ttry { \n\t    var api = new MailChimpAPI(apiKey, { version : '1.3', secure : false });\n\t} catch (error) {\n\t    console.log(error.message);\n\t}\n\t\n    api.campaigns({ start: 0, limit: 25 }, function (error, data) {\n        if (error)\n            console.log(error.message);\n        else\n            console.log(JSON.stringify(data)); // Do something with your data!\n    });\n\t\n});\n```\n\n### MailChimp Partner API\n\n_MailChimpPartnerAPI_ takes two arguments. The first argument is your app key, which you can generate and find in your MailChimp Account, if you are eligible to use the Partner API. The second argument is an options object which can contain the following options:\n\n * `version` The Partner API version to use, currently only 1.3 is available and supported. Defaults to 1.3.\n * `secure` Whether or not to use secure connections over HTTPS (true/false). Defaults to false.\n * `userAgent` Custom User-Agent description to use in the request header.\n \nThe callback function for each API method gets two arguments. The first one is an error object which is null when no error occured, the second one an object with all information retrieved as long as no error occured.\n\nExample:\n\n```javascript\nvar MailChimpPartnerAPI = require('mailchimp').MailChimpPartnerAPI;\n\nvar appKey = 'Your MailChimp app key';\n\ntry { \n    var api = new MailChimpPartnerAPI(appKey, { version : '1.3', secure : false });\n} catch (error) {\n    console.log(error.message);\n}\n\napi.checkUsername({ username: '/* USERNAME */' }, function (error, data) {\n    if (error)\n        console.log(error.message);\n    else\n        console.log(JSON.stringify(data)); // Do something with your data!\n});\n```\n\t\n### Mandrill API\n\n_MandrillAPI_ takes two arguments. The first argument is your API key, which you can find in your Mandrill Account. The second argument is an options object which can contain the following options:\n\n * `version` The Mandrill API version to use, currently only 1.0 is available and supported. Defaults to 1.0.\n * `secure` Whether or not to use secure connections over HTTPS (true/false). Defaults to false.\n * `userAgent` Custom User-Agent description to use in the request header.\n \nAll of the API categories and methods described in the Mandrill API Documentation ([http://apidocs.mailchimp.com](http://apidocs.mailchimp.com)) are available in this wrapper. To use the the method `call` is used which takes four parameters:\n \n * `category` The category of the API method to call (e.g. 'users').\n * `method` The method to call in the given category.\n * `params` Parameters to pass to the API method.\n * `callback` Callback function for returned data or errors with two parameters. The first one being an error object which is null when no error occured, the second one an object with all information retrieved as long as no error occured.\n\n```javascript\nvar MandrillAPI = require('mailchimp').MandrillAPI;\n\nvar apiKey = 'Your Mandrill API Key';\n\ntry { \n    var mandrill = new MandrillAPI(apiKey, { version : '1.0', secure: false });\n} catch (error) {\n    console.log(error.message);\n}\n\nmandrill.call('tags', 'time-series', { tag : '/* TAGNAME */'  }, function (error, data) {\n    if (error)\n        console.log(error.message);\n    else\n        console.log(JSON.stringify(data)); // Do something with your data!\n});\n```\n\n### MailChimp STS API\n\n_MailChimpSTSAPI_ is no longer part of this wrapper as of version 1.0.1 because the API was discontinued by MailChimp.\n\t\n## License\n\n_node-mailchimp_ is licensed under the MIT License. (See LICENSE) ",
  "readmeFilename": "README.md",
  "_id": "mailchimp@1.1.0",
  "dist": {
    "shasum": "253220f0091724b1033fadcf9f8aaad68dcad309",
    "tarball": "http://registry.npmjs.org/mailchimp/-/mailchimp-1.1.0.tgz"
  },
  "_npmVersion": "1.1.65",
  "_npmUser": {
    "name": "gomfunkel",
    "email": "leinich@gmx.net"
  },
  "maintainers": [
    {
      "name": "gomfunkel",
      "email": "leinich@gmx.net"
    }
  ],
  "directories": {},
  "_shasum": "253220f0091724b1033fadcf9f8aaad68dcad309",
  "_from": "mailchimp@1.1.0",
  "_resolved": "https://registry.npmjs.org/mailchimp/-/mailchimp-1.1.0.tgz"
}
