{"version":3,"sources":["telescope-notifications/lib/notifications.js","telescope-notifications/lib/herald.js","telescope-notifications//home/action/workspace/Telescope/packages/telescope-notifications/package-tap.i18n","telescope-notifications/lib/server/notifications-server.js","telescope-notifications/lib/server/routes.js","telescope-notifications//home/action/workspace/Telescope/packages/telescope-notifications/i18n/de.i18n.json","telescope-notifications//home/action/workspace/Telescope/packages/telescope-notifications/i18n/en.i18n.json","telescope-notifications//home/action/workspace/Telescope/packages/telescope-notifications/i18n/es.i18n.json","telescope-notifications//home/action/workspace/Telescope/packages/telescope-notifications/i18n/fr.i18n.json","telescope-notifications//home/action/workspace/Telescope/packages/telescope-notifications/i18n/it.i18n.json","telescope-notifications//home/action/workspace/Telescope/packages/telescope-notifications/i18n/zh-CN.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oD;AACA,qD;;AAEA,iG;AACA,yH;;AAEA,sC;AACA,kD;AACA,gE;;AAEA,6D;AACA,6C;AACA,iF;AACA,yC;AACA,4C;AACA,iF;AACA,G;AACA,c;;AAEA,G;;AAEA,yD;AACA,2C;AACA,gF;AACA,c;AACA,G;;AAEA,0D;AACA,2D;AACA,uD;;AAEA,6C;AACA,4B;AACA,sE;AACA,6D;AACA,U;AACA,6B;;AAEA,+B;AACA,2E;AACA,yC;;AAEA,8F;AACA,wC;;AAEA,K;;AAEA,mD;AACA,oC;AACA,E;AACA,oE;;AAEA,6F;AACA,yD;AACA,4F;AACA,Q;AACA,kD;AACA,0F;AACA,Q;AACA,uG;AACA,mD;AACA,M;AACA,O;;AAEA,K;;AAEA,gD;AACA,yF;AACA,6B;;AAEA,gE;AACA,yF;AACA,oG;AACA,kH;;AAEA,sE;AACA,I;AACA,K;;AAEA,G;;AAEA,8B;AACA,2B;;AAEA,iB;;AAEA,G;;AAEA,0B;AACA,qC;AACA,mB;AACA,kB;AACA,mB;AACA,uB;AACA,e;AACA,sC;AACA,mG;AACA,K;AACA,G;AACA,E;AACA,6C;;AAEA,mE;AACA,yB;AACA,G;AACA,yC;AACA,qB;AACA,oB;AACA,qB;AACA,iB;AACA,kB;AACA,O;AACA,K;AACA,G;AACA,E;;AAEA,yC;AACA,0C;AACA,gC;AACA,iB;AACA,iB;AACA,mB;AACA,iB;AACA,I;AACA,c;AACA,C;AACA,mD;;;;;;;;;;;;;;;;;;;;AC7HA,mD;AACA,qD;AACA,oC;AACA,E;AACA,4B;;AAEA,0B;AACA,0B;AACA,yB;AACA,K;;AAEA,8E;AACA,4E;;AAEA,G;;AAEA,4C;AACA,0B;AACA,mE;AACA,iC;AACA,6D;AACA,yF;AACA,Q;AACA,C;;AAEA,iD;AACA,kD;AACA,a;AACA,+B;AACA,U;AACA,mD;AACA,G;AACA,C;;AAEA,oC;AACA,kD;AACA,a;AACA,6B;AACA,U;AACA,0B;AACA,G;AACA,C;;AAEA,iG;AACA,iG;AACA,iG;;AAEA,8B;AACA,U;AACA,Y;AACA,oC;AACA,6C;AACA,+E;AACA,2E;AACA,iD;AACA,O;AACA,K;AACA,G;AACA,0D;AACA,G;;AAEA,qC;AACA,U;AACA,Y;AACA,oC;AACA,6C;AACA,wF;AACA,kF;AACA,iD;AACA,O;AACA,K;AACA,G;AACA,G;;AAEA,mC;AACA,U;AACA,e;AACA,Y;AACA,oC;AACA,6C;AACA,sE;AACA,gF;AACA,iD;AACA,O;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,wD;AACA,iE;AACA,U;AACA,K;AACA,I;AACA,c;AACA,0B;AACA,2C;AACA,uB;AACA,M;AACA,4B;AACA,2C;AACA,yB;AACA,K;AACA,G;AACA,G;;AAEA,iG;AACA,iG;AACA,iG;;AAEA,mE;AACA,+B;AACA,2B;AACA,qD;AACA,I;AACA,+B;AACA,+D;AACA,I;AACA,uB;AACA,wC;AACA,I;AACA,0B;AACA,gC;AACA,I;AACA,oB;AACA,uE;AACA,G;AACA,E;;AAEA,iC;AACA,U;AACA,e;AACA,Y;AACA,+B;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,wD;AACA,+D;AACA,U;AACA,K;AACA,I;AACA,oC;AACA,G;;AAEA,+B;AACA,U;AACA,e;AACA,Y;AACA,+B;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,wD;AACA,6D;AACA,U;AACA,K;AACA,I;AACA,oC;AACA,G;;AAEA,2C;AACA,U;AACA,e;AACA,Y;AACA,+B;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,wD;AACA,6D;AACA,U;AACA,K;AACA,I;AACA,oC;AACA,G;;;;;;;;;;;;;;;;;;AClLA,yH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,oC;AACA,6D;AACA,E;;AAEA,6E;AACA,kD;;AAEA,c;AACA,e;AACA,oC;AACA,0C;;AAEA,+B;;AAEA,sB;AACA,8F;AACA,mC;AACA,Y;;AAEA,oB;AACA,qF;AACA,iC;AACA,Y;;AAEA,gC;AACA,oF;AACA,mC;AACA,Y;;AAEA,Y;AACA,Y;AACA,G;;AAEA,qD;AACA,+B;AACA,wD;AACA,6D;AACA,+B;AACA,K;;AAEA,iC;;AAEA,qE;AACA,kD;;AAEA,U;AACA,qB;AACA,c;AACA,G;AACA,E;;AAEA,gB;AACA,mC;AACA,8E;AACA,iF;AACA,wD;AACA,a;AACA,kD;AACA,e;AACA,4C;AACA,4C;AACA,+C;AACA,6C;AACA,S;AACA,S;AACA,kB;AACA,K;AACA,iB;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;ACrEA,4B;AACA,E;AACA,uB;;AAEA,4C;AACA,yB;AACA,oB;AACA,wB;AACA,mE;AACA,sE;AACA,qD;AACA,0B;AACA,K;AACA,K;;AAEA,G;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,sb;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,qkB;;;;;;;;;;;;;;;;;;;ACRA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,sb;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,+iB;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,sb;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,6C;AACA,0C;;AAEA,gC;AACA,yD;AACA,C;AACA,kD;AACA,qC;AACA,C;;AAEA,6D;AACA,gD;AACA,C;;AAEA,yb","file":"/packages/telescope-notifications.js","sourcesContent":["// add new post notification callback on post submit\npostAfterSubmitMethodCallbacks.push(function (post) {\n\n  var adminIds = _.pluck(Meteor.users.find({'isAdmin': true}, {fields: {_id:1}}).fetch(), '_id');\n  var notifiedUserIds = _.pluck(Meteor.users.find({'profile.notifications.posts': 1}, {fields: {_id:1}}).fetch(), '_id');\n\n  // remove post author ID from arrays\n  var adminIds = _.without(adminIds, post.userId);\n  var notifiedUserIds = _.without(notifiedUserIds, post.userId);\n\n  if (post.status === STATUS_PENDING && !!adminIds.length) { \n    // if post is pending, only notify admins\n    Herald.createNotification(adminIds, {courier: 'newPendingPost', data: post});\n  } else if (!!notifiedUserIds.length) { \n    // if post is approved, notify everybody\n    Herald.createNotification(notifiedUserIds, {courier: 'newPost', data: post});\n  }\n  return post;\n\n});\n\n// notify users that their pending post has been approved\npostApproveCallbacks.push(function (post) {\n  Herald.createNotification(post.userId, {courier: 'postApproved', data: post});\n  return post;\n});\n\n// add new comment notification callback on comment submit\ncommentAfterSubmitMethodCallbacks.push(function (comment) {\n  if(Meteor.isServer && !comment.disableNotifications){\n\n    var post = Posts.findOne(comment.postId),\n        notificationData = {\n          comment: _.pick(comment, '_id', 'userId', 'author', 'body'),\n          post: _.pick(post, '_id', 'userId', 'title', 'url')\n        },\n        userIdsNotified = [];\n\n    // 1. Notify author of post\n    // do not notify author of post if they're the ones posting the comment\n    if (comment.userId !== post.userId) {\n\n      Herald.createNotification(post.userId, {courier: 'newComment', data: notificationData});\n      userIdsNotified.push(post.userId);\n\n    }\n\n    // 2. Notify author of comment being replied to\n    if (!!comment.parentCommentId) {\n  \n      var parentComment = Comments.findOne(comment.parentCommentId);\n\n      // do not notify author of parent comment if they're also post author or comment author\n      // (someone could be replying to their own comment)\n      if (parentComment.userId !== post.userId || parentComment.userId !== comment.userId) {\n        \n        // add parent comment to notification data\n        notificationData.parentComment = _.pick(parentComment, '_id', 'userId', 'author');\n        \n        Herald.createNotification(parentComment.userId, {courier: 'newReply', data: notificationData});\n        userIdsNotified.push(parentComment.userId);\n      \n      }\n\n    }\n\n    // 3. Notify users subscribed to the thread \n    // TODO: ideally this would be injected from the telescope-subscribe-to-posts package\n    if (!!post.subscribers) {\n\n      // remove userIds of users that have already been notified\n      // and of comment author (they could be replying in a thread they're subscribed to)\n      var subscriberIdsToNotify = _.difference(post.subscribers, userIdsNotified, [comment.userId]);\n      Herald.createNotification(subscriberIdsToNotify, {courier: 'newCommentSubscribed', data: notificationData});\n\n      userIdsNotified = userIdsNotified.concat(subscriberIdsToNotify);\n    \n    }\n\n  }\n\n  console.log(userIdsNotified)\n  console.log(comment.body)\n\n  return comment;\n\n});\n\nvar emailNotifications = {\n  propertyName: 'emailNotifications',\n  propertySchema: {\n    type: Boolean,\n    optional: true,\n    defaultValue: true,\n    autoform: {\n      group: 'notifications_fieldset',\n      instructions: 'Enable email notifications for new posts and new comments (requires restart).'\n    }\n  }\n};\naddToSettingsSchema.push(emailNotifications);\n\n// make it possible to disable notifications on a per-comment basis\naddToCommentsSchema.push(\n  {\n    propertyName: 'disableNotifications',\n    propertySchema: {\n      type: Boolean,\n      optional: true,\n      autoform: {\n        omit: true\n      }\n    }\n  }\n);\n\nfunction setNotificationDefaults (user) {\n  // set notifications default preferences\n  user.profile.notifications = {\n    users: false,\n    posts: false,\n    comments: true,\n    replies: true\n  };\n  return user;\n}\nuserCreatedCallbacks.push(setNotificationDefaults);\n","\n// send emails every second when in dev environment\nif (Meteor.absoluteUrl().indexOf('localhost') !== -1)\n  Herald.settings.queueTimer = 1000;\n  \nMeteor.startup(function () {\n\n  Herald.collection.deny({\n    update: !can.editById,\n    remove: !can.editById\n  });\n\n  // disable all email notifications when \"emailNotifications\" is set to false\n  Herald.settings.overrides.email = !getSetting('emailNotifications', true);\n\n});\n\nvar commentEmail = function (userToNotify) {\n  var notification = this;\n  // put in setTimeout so it doesn't hold up the rest of the method\n  Meteor.setTimeout(function () {\n    notificationEmail = buildEmailNotification(notification);\n    sendEmail(getEmail(userToNotify), notificationEmail.subject, notificationEmail.html);\n  }, 1);\n}\n\nvar getCommenterProfileUrl = function (comment) {\n  var user = Meteor.users.findOne(comment.userId);\n  if (user) {\n    return getProfileUrl(user);\n  } else {\n    return getProfileUrlBySlugOrId(comment.userId);\n  }\n}\n\nvar getAuthor = function (comment) {\n  var user = Meteor.users.findOne(comment.userId);\n  if (user) {\n    return getUserName(user);\n  } else {\n    return comment.author;\n  }\n}\n\n// ------------------------------------------------------------------------------------------- //\n// -----------------------------------------  Posts ------------------------------------------ //\n// ------------------------------------------------------------------------------------------- //\n\nHerald.addCourier('newPost', {\n  media: {\n    email: {\n      emailRunner: function (user) {\n        var p = getPostProperties(this.data);\n        var subject = p.postAuthorName+' has created a new post: '+p.postTitle;\n        var html = buildEmailTemplate(getEmailTemplate('emailNewPost')(p));\n        sendEmail(getEmail(user), subject, html);\n      }\n    }\n  }\n  // message: function (user) { return 'email template?' }\n});\n\nHerald.addCourier('newPendingPost', {\n  media: {\n    email: {\n      emailRunner: function (user) {\n        var p = getPostProperties(this.data);\n        var subject = p.postAuthorName+' has a new post pending approval: '+p.postTitle;\n        var html = buildEmailTemplate(getEmailTemplate('emailNewPendingPost')(p));\n        sendEmail(getEmail(user), subject, html);\n      }\n    }\n  }\n});\n\nHerald.addCourier('postApproved', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: function (user) {\n        var p = getPostProperties(this.data);\n        var subject = 'Your post “'+p.postTitle+'” has been approved';\n        var html = buildEmailTemplate(getEmailTemplate('emailPostApproved')(p));\n        sendEmail(getEmail(user), subject, html);\n      }\n    }\n  },\n  message: {\n    default: function (user) {\n      return Blaze.toHTML(Blaze.With(this, function () {\n        return Template[getTemplate('notificationPostApproved')];\n      }));\n    }\n  },\n  transform: {\n    postUrl: function () {\n      var p = getPostProperties(this.data);\n      return p.postUrl;\n    },\n    postTitle: function () {\n      var p = getPostProperties(this.data);\n      return p.postTitle;\n    }\n  }\n});\n\n// ------------------------------------------------------------------------------------------- //\n// ---------------------------------------- Comments ----------------------------------------- //\n// ------------------------------------------------------------------------------------------- //\n\n// specify how to get properties used in template from comment data\nvar commentCourierTransform = {\n  profileUrl: function () {\n    return getCommenterProfileUrl(this.data.comment);\n  },\n  postCommentUrl: function () {\n    return Router.path('post_page', {_id: this.data.post._id});\n  },\n  author: function () {\n    return getAuthor(this.data.comment);\n  },\n  postTitle: function () {\n    return this.data.post.title;\n  },\n  url: function () {\n    return Router.path('comment_reply', {_id: this.parentComment._id});\n  }\n};\n\nHerald.addCourier('newComment', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: commentEmail\n    }\n  },\n  message: {\n    default: function (user) {\n      return Blaze.toHTML(Blaze.With(this, function () {\n        return Template[getTemplate('notificationNewComment')];\n      }));\n    }\n  },\n  transform: commentCourierTransform\n});\n\nHerald.addCourier('newReply', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: commentEmail\n    }\n  },\n  message: {\n    default: function (user) {\n      return Blaze.toHTML(Blaze.With(this, function () {\n        return Template[getTemplate('notificationNewReply')];\n      }));\n    }\n  },\n  transform: commentCourierTransform\n});\n\nHerald.addCourier('newCommentSubscribed', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: commentEmail\n    }\n  },\n  message: {\n    default: function (user) {\n      return Blaze.toHTML(Blaze.With(this, function () {\n        return Template[getTemplate('notificationNewReply')];\n      }));\n    }\n  },\n  transform: commentCourierTransform\n});","TAPi18n.packages[\"telescope-notifications\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","getUnsubscribeLink = function(user){\n  return getRouteUrl('unsubscribe', {hash: user.email_hash});\n};\n\n// given a notification, return the correct subject and html to send an email\nbuildEmailNotification = function (notification) {\n\n  var subject,\n      template,\n      post = notification.data.post,\n      comment = notification.data.comment;\n\n  switch(notification.courier){\n\n    case 'newComment':\n      subject = notification.author()+' left a new comment on your post \"' + post.title + '\"';\n      template = 'emailNewComment';\n      break;\n\n    case 'newReply':\n      subject = notification.author()+' replied to your comment on \"'+post.title+'\"';\n      template = 'emailNewReply';\n      break;\n\n    case 'newCommentSubscribed':\n      subject = notification.author()+' left a new comment on \"' + post.title + '\"';\n      template = 'emailNewComment';\n      break;\n\n    default:\n      break;\n  }\n\n  var emailProperties = _.extend(notification.data, {\n    body: marked(comment.body),\n    profileUrl: getProfileUrlBySlugOrId(comment.userId),\n    postCommentUrl: getPostCommentUrl(post._id, comment._id),\n    postLink: getPostLink(post)\n  });\n\n  // console.log(emailProperties)\n\n  var notificationHtml = getEmailTemplate(template)(emailProperties);\n  var html = buildEmailTemplate(notificationHtml);\n\n  return {\n    subject: subject,\n    html: html\n  }\n};\n\nMeteor.methods({\n  unsubscribeUser : function(hash){\n    // TO-DO: currently, if you have somebody's email you can unsubscribe them\n    // A user-specific salt should be added to the hashing method to prevent this\n    var user = Meteor.users.findOne({email_hash: hash});\n    if(user){\n      var update = Meteor.users.update(user._id, {\n        $set: {\n          'profile.notifications.users' : 0,\n          'profile.notifications.posts' : 0,\n          'profile.notifications.comments' : 0,\n          'profile.notifications.replies' : 0\n        }\n      });\n      return true;\n    }\n    return false;\n  }\n});\n\n","Meteor.startup(function () {\n  \n  // Notification email\n\n  Router.route('/email/notification/:id?', {\n    name: 'notification',\n    where: 'server',\n    action: function() {\n      var notification = Herald.collection.findOne(this.params.id);\n      var notificationContents = buildEmailNotification(notification);\n      this.response.write(notificationContents.html);\n      this.response.end();\n    }\n  });\n\n});","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"de\"])) {\n  TAPi18n.translations[\"de\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"de\"][namespace])) {\n  TAPi18n.translations[\"de\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"de\"][namespace], {\"left_a_new_comment_on\":\"left a new comment on\",\"has_replied_to_your_comment_on\":\"has replied to your comment on\",\"mark_as_read\":\"Mark as read\",\"no_notifications\":\"No notifications\",\"you_have_been_unsubscribed_from_all_notifications\":\"You have been unsubscribed from all notifications.\",\"user_not_found\":\"User not found\",\"1_notification\":\"1 notification\",\"notifications\":\"notifications\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \nTAPi18n.addResourceBundle(\"en\", namespace, {\"left_a_new_comment_on\":\"left a new comment on\",\"has_replied_to_your_comment_on\":\"has replied to your comment on\",\"mark_as_read\":\"Mark as read\",\"no_notifications\":\"No notifications\",\"you_have_been_unsubscribed_from_all_notifications\":\"You have been unsubscribed from all notifications.\",\"user_not_found\":\"User not found\",\"1_notification\":\"1 notification\",\"notifications\":\"notifications\",\"notifications_fieldset\":\"Notifications\",\"emailNotifications\":\"Email Notifications\",\"your_post\":\"Your post\",\"has_been_approved\":\"has been approved\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"es\"])) {\n  TAPi18n.translations[\"es\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"es\"][namespace])) {\n  TAPi18n.translations[\"es\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"es\"][namespace], {\"left_a_new_comment_on\":\"left a new comment on\",\"has_replied_to_your_comment_on\":\"has replied to your comment on\",\"mark_as_read\":\"Mark as read\",\"no_notifications\":\"No notifications\",\"you_have_been_unsubscribed_from_all_notifications\":\"You have been unsubscribed from all notifications.\",\"user_not_found\":\"User not found\",\"1_notification\":\"1 notification\",\"notifications\":\"notifications\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"fr\"])) {\n  TAPi18n.translations[\"fr\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"fr\"][namespace])) {\n  TAPi18n.translations[\"fr\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"fr\"][namespace], {\"left_a_new_comment_on\":\"a laissé un nouveau commentaire sur\",\"has_replied_to_your_comment_on\":\"a répondu à\",\"mark_as_read\":\"Marquer comme lu\",\"no_notifications\":\"Aucune notification\",\"you_have_been_unsubscribed_from_all_notifications\":\"Vous avez été désabonné de toutes les notifications.\",\"user_not_found\":\"Utilisateur non trouvé\",\"1_notification\":\"1 notification\",\"notifications\":\"notifications\",\"emailNotifications\":\"Notifications par Email\",\"your_post\":\"Votre post\",\"has_been_approved\":\"a été approuvé\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"it\"])) {\n  TAPi18n.translations[\"it\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"it\"][namespace])) {\n  TAPi18n.translations[\"it\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"it\"][namespace], {\"left_a_new_comment_on\":\"left a new comment on\",\"has_replied_to_your_comment_on\":\"has replied to your comment on\",\"mark_as_read\":\"Mark as read\",\"no_notifications\":\"No notifications\",\"you_have_been_unsubscribed_from_all_notifications\":\"You have been unsubscribed from all notifications.\",\"user_not_found\":\"User not found\",\"1_notification\":\"1 notification\",\"notifications\":\"notifications\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope-notifications\",\n    namespace = \"telescope-notifications\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"zh-CN\"])) {\n  TAPi18n.translations[\"zh-CN\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"zh-CN\"][namespace])) {\n  TAPi18n.translations[\"zh-CN\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"zh-CN\"][namespace], {\"left_a_new_comment_on\":\"left a new comment on\",\"has_replied_to_your_comment_on\":\"has replied to your comment on\",\"mark_as_read\":\"Mark as read\",\"no_notifications\":\"No notifications\",\"you_have_been_unsubscribed_from_all_notifications\":\"You have been unsubscribed from all notifications.\",\"user_not_found\":\"User not found\",\"1_notification\":\"1 notification\",\"notifications\":\"notifications\"});\n"]}