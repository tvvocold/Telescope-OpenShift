{"version":3,"file":"/packages/chuangbo:marked.js","sources":["chuangbo:marked/marked/lib/marked.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,G;AACA,6B;AACA,+D;AACA,iC;AACA,G;;AAEA,c;;AAEA,G;AACA,sB;AACA,G;;AAEA,a;AACA,kB;AACA,4B;AACA,e;AACA,kC;AACA,mD;AACA,gB;AACA,gD;AACA,mD;AACA,wE;AACA,yD;AACA,2E;AACA,c;AACA,8E;AACA,iB;AACA,E;;AAEA,iC;AACA,0D;AACA,sC;AACA,yB;AACA,K;;AAEA,gC;AACA,yB;AACA,iD;AACA,6C;AACA,K;;AAEA,4C;AACA,oB;AACA,K;;AAEA,qB;AACA,wD;AACA,yD;AACA,8D;;AAEA,gC;AACA,gC;AACA,oC;AACA,kD;AACA,sB;AACA,K;;AAEA,0C;AACA,kB;AACA,4B;AACA,8B;AACA,kC;AACA,2B;AACA,oB;AACA,K;;AAEA,G;AACA,uB;AACA,G;;AAEA,gC;;AAEA,G;AACA,oB;AACA,G;;AAEA,qC;AACA,mE;AACA,gB;AACA,G;;AAEA,8C;AACA,e;AACA,yD;AACA,oD;AACA,K;;AAEA,G;AACA,6B;AACA,G;;AAEA,qC;AACA,2E;AACA,oE;AACA,G;;AAEA,G;AACA,c;AACA,G;;AAEA,yB;AACA,mB;AACA,yB;AACA,4C;AACA,4B;;AAEA,yB;AACA,8B;AACA,gC;AACA,Y;AACA,6B;AACA,K;AACA,G;AACA,C;;AAEA,G;AACA,qB;AACA,G;;AAEA,oB;;AAEA,G;AACA,oB;AACA,G;;AAEA,oC;AACA,iC;AACA,wB;AACA,E;;AAEA,G;AACA,gB;AACA,G;;AAEA,qC;AACA,W;AACA,8B;AACA,2B;AACA,4B;AACA,8B;;AAEA,+B;AACA,E;;AAEA,G;AACA,S;AACA,G;;AAEA,gD;AACA,qC;AACA,U;AACA,W;AACA,S;AACA,U;AACA,O;AACA,U;AACA,W;AACA,O;AACA,Q;;AAEA,e;AACA,c;AACA,6C;AACA,yC;AACA,8B;AACA,0B;AACA,uB;AACA,W;AACA,O;AACA,K;;AAEA,W;AACA,0C;AACA,yC;AACA,0C;AACA,wB;AACA,qB;AACA,oC;AACA,mC;AACA,e;AACA,S;AACA,e;AACA,K;;AAEA,mB;AACA,4C;AACA,yC;AACA,wB;AACA,qB;AACA,qB;AACA,oB;AACA,S;AACA,e;AACA,K;;AAEA,c;AACA,6C;AACA,yC;AACA,wB;AACA,wB;AACA,6B;AACA,oB;AACA,S;AACA,e;AACA,K;;AAEA,kC;AACA,sD;AACA,yC;;AAEA,c;AACA,sB;AACA,mE;AACA,gE;AACA,oD;AACA,Q;;AAEA,+C;AACA,8C;AACA,kC;AACA,sD;AACA,mC;AACA,qD;AACA,iC;AACA,gB;AACA,+B;AACA,S;AACA,O;;AAEA,+C;AACA,sD;AACA,O;;AAEA,6B;;AAEA,e;AACA,K;;AAEA,e;AACA,8C;AACA,yC;AACA,wB;AACA,wB;AACA,sC;AACA,oB;AACA,S;AACA,e;AACA,K;;AAEA,S;AACA,wC;AACA,yC;AACA,wB;AACA,kB;AACA,S;AACA,e;AACA,K;;AAEA,iB;AACA,gD;AACA,yC;;AAEA,wB;AACA,gC;AACA,S;;AAEA,2C;;AAEA,uC;AACA,0C;AACA,+B;AACA,iC;;AAEA,wB;AACA,8B;AACA,S;;AAEA,e;AACA,K;;AAEA,W;AACA,0C;AACA,yC;AACA,oB;;AAEA,wB;AACA,2B;AACA,gC;AACA,S;;AAEA,iC;AACA,0C;;AAEA,mB;AACA,qB;AACA,Y;;AAEA,0B;AACA,sB;;AAEA,wC;AACA,2C;AACA,4B;AACA,sD;;AAEA,+B;AACA,qC;AACA,mC;AACA,+B;AACA,uC;AACA,uE;AACA,4C;AACA,S;;AAEA,6D;AACA,wD;AACA,qD;AACA,+C;AACA,iE;AACA,oD;AACA,sB;AACA,W;AACA,S;;AAEA,kD;AACA,+C;AACA,iC;AACA,kD;AACA,0B;AACA,uD;AACA,mC;AACA,S;;AAEA,0B;AACA,qB;AACA,gC;AACA,+B;AACA,W;;AAEA,mB;AACA,oC;;AAEA,0B;AACA,+B;AACA,W;AACA,O;;AAEA,wB;AACA,wB;AACA,S;;AAEA,e;AACA,K;;AAEA,W;AACA,0C;AACA,yC;AACA,wB;AACA,mC;AACA,uB;AACA,mB;AACA,2E;AACA,oB;AACA,S;AACA,e;AACA,K;;AAEA,U;AACA,2D;AACA,yC;AACA,iD;AACA,qB;AACA,qB;AACA,Q;AACA,e;AACA,K;;AAEA,kB;AACA,oD;AACA,yC;;AAEA,c;AACA,sB;AACA,mE;AACA,gE;AACA,+D;AACA,Q;;AAEA,+C;AACA,8C;AACA,kC;AACA,sD;AACA,mC;AACA,qD;AACA,iC;AACA,gB;AACA,+B;AACA,S;AACA,O;;AAEA,+C;AACA,qC;AACA,0C;AACA,2B;AACA,O;;AAEA,6B;;AAEA,e;AACA,K;;AAEA,0B;AACA,wD;AACA,yC;AACA,wB;AACA,0B;AACA,uD;AACA,+B;AACA,kB;AACA,S;AACA,e;AACA,K;;AAEA,W;AACA,0C;AACA,2C;AACA,yC;AACA,wB;AACA,qB;AACA,oB;AACA,S;AACA,e;AACA,K;;AAEA,c;AACA,e;AACA,6D;AACA,K;AACA,G;;AAEA,qB;AACA,E;;AAEA,G;AACA,uB;AACA,G;;AAEA,c;AACA,wC;AACA,uC;AACA,Y;AACA,gE;AACA,kC;AACA,4C;AACA,6C;AACA,2D;AACA,gE;AACA,2C;AACA,yB;AACA,Y;AACA,4C;AACA,E;;AAEA,0D;AACA,gE;;AAEA,kC;AACA,4B;AACA,wB;AACA,K;;AAEA,wC;AACA,4B;AACA,K;;AAEA,G;AACA,wB;AACA,G;;AAEA,kC;;AAEA,G;AACA,0B;AACA,G;;AAEA,4C;AACA,2E;AACA,gE;AACA,G;;AAEA,G;AACA,qB;AACA,G;;AAEA,uC;AACA,iD;AACA,8C;AACA,iC;AACA,4B;AACA,iB;AACA,wB;AACA,M;AACA,G;;AAEA,G;AACA,mC;AACA,G;;AAEA,uC;AACA,wC;AACA,+C;AACA,G;;AAEA,G;AACA,0B;AACA,G;;AAEA,sC;AACA,4C;AACA,qB;AACA,6B;AACA,wD;AACA,uC;;AAEA,oB;AACA,a;AACA,yD;AACA,G;;AAEA,yB;AACA,8B;AACA,iC;AACA,Y;AACA,8B;AACA,K;AACA,qC;AACA,iC;AACA,G;AACA,C;;AAEA,G;AACA,sB;AACA,G;;AAEA,2B;;AAEA,G;AACA,iC;AACA,G;;AAEA,oD;AACA,+C;AACA,4B;AACA,E;;AAEA,G;AACA,mB;AACA,G;;AAEA,8C;AACA,c;AACA,U;AACA,U;AACA,U;AACA,U;;AAEA,e;AACA,a;AACA,4C;AACA,yC;AACA,oB;AACA,e;AACA,K;;AAEA,e;AACA,8C;AACA,yC;AACA,2B;AACA,uC;AACA,4C;AACA,gC;AACA,6C;AACA,c;AACA,8B;AACA,oB;AACA,O;AACA,kD;AACA,e;AACA,K;;AAEA,gB;AACA,2D;AACA,yC;AACA,4B;AACA,kB;AACA,kD;AACA,e;AACA,K;;AAEA,U;AACA,yC;AACA,iD;AACA,2B;AACA,yD;AACA,4B;AACA,O;AACA,yC;AACA,kC;AACA,wB;AACA,iB;AACA,e;AACA,K;;AAEA,W;AACA,0C;AACA,yC;AACA,yB;AACA,mC;AACA,qB;AACA,qB;AACA,S;AACA,0B;AACA,e;AACA,K;;AAEA,sB;AACA,4C;AACA,iD;AACA,yC;AACA,qD;AACA,4C;AACA,gC;AACA,gC;AACA,wC;AACA,iB;AACA,O;AACA,yB;AACA,wC;AACA,0B;AACA,e;AACA,K;;AAEA,a;AACA,4C;AACA,yC;AACA,iE;AACA,e;AACA,K;;AAEA,S;AACA,wC;AACA,yC;AACA,6D;AACA,e;AACA,K;;AAEA,W;AACA,0C;AACA,yC;AACA,0D;AACA,e;AACA,K;;AAEA,S;AACA,wC;AACA,yC;AACA,gC;AACA,e;AACA,K;;AAEA,gB;AACA,yC;AACA,yC;AACA,oD;AACA,e;AACA,K;;AAEA,W;AACA,0C;AACA,yC;AACA,8C;AACA,e;AACA,K;;AAEA,c;AACA,e;AACA,6D;AACA,K;AACA,G;;AAEA,a;AACA,E;;AAEA,G;AACA,e;AACA,G;;AAEA,wD;AACA,8B;AACA,qD;;AAEA,iC;AACA,0D;AACA,uD;AACA,E;;AAEA,G;AACA,8B;AACA,G;;AAEA,oD;AACA,6C;AACA,a;AACA,gB;AACA,6B;AACA,sB;AACA,mD;AACA,oC;AACA,4B;AACA,sB;AACA,wD;AACA,sB;AACA,4B;AACA,e;AACA,iC;AACA,E;;AAEA,G;AACA,e;AACA,G;;AAEA,+C;AACA,c;AACA,qB;AACA,W;AACA,S;;AAEA,sB;AACA,4B;AACA,8B;AACA,iC;AACA,K;AACA,2B;AACA,G;;AAEA,a;AACA,E;;AAEA,G;AACA,W;AACA,G;;AAEA,4B;AACA,+B;AACA,C;;AAEA,yD;AACA,+B;AACA,iD;AACA,sC;AACA,qB;AACA,iB;AACA,K;AACA,G;;AAEA,c;AACA,wB;AACA,6C;AACA,0B;AACA,G;;AAEA,6B;AACA,6B;AACA,wB;AACA,U;AACA,2C;AACA,0B;AACA,E;;AAEA,iD;AACA,sD;AACA,E;;AAEA,0C;AACA,c;AACA,E;;AAEA,yD;AACA,a;AACA,W;AACA,a;AACA,+B;AACA,+C;AACA,U;AACA,U;AACA,W;AACA,W;AACA,Y;AACA,E;;AAEA,oC;AACA,mD;AACA,E;;AAEA,mD;AACA,mC;AACA,yD;AACA,E;;AAEA,8C;AACA,mC;AACA,E;;AAEA,+C;AACA,iC;AACA,E;;AAEA,mD;AACA,oB;AACA,iB;AACA,Y;AACA,kB;AACA,iB;AACA,U;AACA,kB;AACA,mB;AACA,E;;AAEA,iD;AACA,wC;AACA,E;;AAEA,yD;AACA,wC;AACA,uB;AACA,6D;AACA,uB;AACA,6C;AACA,E;;AAEA,sB;AACA,4C;AACA,yC;AACA,E;;AAEA,wC;AACA,iC;AACA,E;;AAEA,8C;AACA,qC;AACA,E;;AAEA,oC;AACA,+C;AACA,E;;AAEA,yC;AACA,mC;AACA,E;;AAEA,uD;AACA,8B;AACA,S;AACA,mD;AACA,+B;AACA,uB;AACA,iB;AACA,gB;AACA,K;AACA,4C;AACA,gB;AACA,K;AACA,G;AACA,qC;AACA,c;AACA,oC;AACA,G;AACA,6B;AACA,a;AACA,E;;AAEA,wD;AACA,yD;AACA,c;AACA,oC;AACA,G;AACA,yC;AACA,a;AACA,E;;AAEA,G;AACA,sB;AACA,G;;AAEA,0B;AACA,mB;AACA,oB;AACA,4C;AACA,gE;AACA,wC;AACA,uC;AACA,C;;AAEA,G;AACA,sB;AACA,G;;AAEA,iD;AACA,6C;AACA,2B;AACA,E;;AAEA,G;AACA,a;AACA,G;;AAEA,wC;AACA,wE;AACA,8B;;AAEA,e;AACA,uB;AACA,sB;AACA,G;;AAEA,a;AACA,E;;AAEA,G;AACA,a;AACA,G;;AAEA,oC;AACA,wC;AACA,E;;AAEA,G;AACA,qB;AACA,G;;AAEA,oC;AACA,kD;AACA,E;;AAEA,G;AACA,oB;AACA,G;;AAEA,yC;AACA,6B;;AAEA,uC;AACA,oC;AACA,G;;AAEA,kC;AACA,E;;AAEA,G;AACA,sB;AACA,G;;AAEA,mC;AACA,4B;AACA,mB;AACA,gB;AACA,K;AACA,gB;AACA,gC;AACA,K;AACA,qB;AACA,mC;AACA,4C;AACA,yB;AACA,yB;AACA,K;AACA,kB;AACA,gD;AACA,wB;AACA,4B;AACA,K;AACA,mB;AACA,qB;AACA,mB;AACA,W;AACA,a;AACA,c;AACA,e;AACA,Y;;AAEA,e;AACA,gB;AACA,sD;AACA,6D;AACA,wC;AACA,mD;AACA,sD;AACA,U;AACA,O;AACA,6C;;AAEA,qD;AACA,kC;;AAEA,kB;AACA,0C;AACA,0C;AACA,uC;AACA,yD;AACA,Y;AACA,S;;AAEA,6C;AACA,O;AACA,+C;AACA,K;AACA,8B;AACA,oB;;AAEA,qD;AACA,2B;AACA,O;;AAEA,4C;AACA,K;AACA,wB;AACA,mB;AACA,uC;;AAEA,+C;AACA,2B;AACA,O;;AAEA,+C;AACA,K;AACA,6B;AACA,oB;;AAEA,oD;AACA,0C;AACA,4B;AACA,uB;AACA,O;;AAEA,0C;AACA,K;AACA,8B;AACA,oB;;AAEA,oD;AACA,2B;AACA,O;;AAEA,0C;AACA,K;AACA,kB;AACA,0D;AACA,6C;AACA,0B;AACA,sC;AACA,K;AACA,uB;AACA,0E;AACA,K;AACA,kB;AACA,uD;AACA,K;AACA,G;AACA,E;;AAEA,G;AACA,U;AACA,G;;AAEA,+B;AACA,a;AACA,sD;AACA,0B;AACA,0B;AACA,4B;AACA,4B;AACA,C;;AAEA,yB;AACA,qD;AACA,wB;AACA,kC;AACA,8B;AACA,gC;AACA,2D;AACA,+C;AACA,K;AACA,c;AACA,K;AACA,C;;AAEA,8B;AACA,uB;AACA,kB;AACA,mC;AACA,6C;AACA,4B;AACA,4C;AACA,qC;AACA,gB;AACA,I;AACA,C;;AAEA,kB;AACA,iB;;AAEA,qB;AACA,W;AACA,Y;AACA,U;;AAEA,qC;AACA,0B;AACA,yB;AACA,8D;AACA,+B;AACA,O;AACA,K;AACA,G;;AAEA,a;AACA,C;;;AAGA,G;AACA,S;AACA,G;;AAEA,qC;AACA,8C;AACA,oB;AACA,qB;AACA,iB;AACA,K;;AAEA,gD;;AAEA,iC;AACA,c;AACA,e;AACA,c;;AAEA,S;AACA,kC;AACA,iB;AACA,yB;AACA,K;;AAEA,4B;;AAEA,2B;AACA,mB;;AAEA,W;AACA,wC;AACA,mB;AACA,gB;AACA,O;;AAEA,gC;;AAEA,gB;AACA,uB;AACA,8B;AACA,M;;AAEA,6C;AACA,oB;AACA,K;;AAEA,yB;;AAEA,gC;;AAEA,oC;AACA,wB;AACA,oC;AACA,qC;AACA,S;AACA,sE;AACA,oD;AACA,uC;AACA,W;AACA,4B;AACA,+B;AACA,8B;AACA,W;AACA,oB;AACA,K;;AAEA,W;AACA,G;AACA,O;AACA,mD;AACA,kD;AACA,e;AACA,2E;AACA,0C;AACA,4C;AACA,sC;AACA,mB;AACA,K;AACA,Y;AACA,G;AACA,C;;AAEA,G;AACA,U;AACA,G;;AAEA,gB;AACA,mC;AACA,8B;AACA,gB;AACA,E;;AAEA,mB;AACA,Y;AACA,e;AACA,gB;AACA,kB;AACA,kB;AACA,oB;AACA,gB;AACA,kB;AACA,sB;AACA,qB;AACA,mB;AACA,yB;AACA,c;AACA,E;;AAEA,G;AACA,S;AACA,G;;AAEA,uB;AACA,6B;;AAEA,2B;;AAEA,qB;AACA,yB;;AAEA,iC;AACA,wC;;AAEA,sB;;AAEA,kC;AACA,0B;AACA,wD;AACA,wC;AACA,Q;AACA,uB;AACA,C;;AAEA,oB;AACA,mE;AACA,K","sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n;(function() {\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment|closed|closing) *(?:\\n{2,}|\\s*$)/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')\n  (/bull/g, block.bullet)\n  ();\n\nblock.list = replace(block.list)\n  (/bull/g, block.bullet)\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n  ('def', '\\\\n+(?=' + block.def.source + ')')\n  ();\n\nblock.blockquote = replace(block.blockquote)\n  ('def', block.def)\n  ();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\nblock.html = replace(block.html)\n  ('comment', /<!--[\\s\\S]*?-->/)\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n  (/tag/g, block._tag)\n  ();\n\nblock.paragraph = replace(block.paragraph)\n  ('hr', block.hr)\n  ('heading', block.heading)\n  ('lheading', block.lheading)\n  ('blockquote', block.blockquote)\n  ('tag', '<' + block._tag)\n  ('def', block.def)\n  ();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)\n  ('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  ();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top, bq) {\n  var src = src.replace(/^ +$/gm, '')\n    , next\n    , loose\n    , cap\n    , bull\n    , b\n    , item\n    , space\n    , i\n    , l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3]\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top, true);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false, bq);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)\n  ('inside', inline._inside)\n  ('href', inline._href)\n  ();\n\ninline.reflink = replace(inline.reflink)\n  ('inside', inline._inside)\n  ();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n    (']|', '~]|')\n    ('|', '|https?://|')\n    ()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer;\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new\n      Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = ''\n    , link\n    , text\n    , href\n    , cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = cap[1].charAt(6) === ':'\n          ? this.mangle(cap[1].substring(7))\n          : this.mangle(cap[1]);\n        href = this.mangle('mailto:') + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      src = src.substring(cap[0].length);\n      text = escape(cap[1]);\n      href = text;\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2], true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += escape(this.smartypants(cap[0]));\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href)\n    , title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/--/g, '\\u2014')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  var out = ''\n    , l = text.length\n    , i = 0\n    , ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + this.options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return '';\n    }\n    if (prot.indexOf('javascript:') === 0) {\n      return '';\n    }\n  }\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer;\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        this.token.text);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = ''\n        , body = ''\n        , i\n        , row\n        , cell\n        , flags\n        , j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        flags = { header: true, align: this.token.align[i] };\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      var body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      var body = ''\n        , ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n  return html.replace(/&([#\\w]+);/g, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt);\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1\n    , target\n    , key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight\n      , tokens\n      , pending\n      , i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function() {\n      var out, err;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occured:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer,\n  xhtml: false\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  this.marked = marked;\n}\n\n}).call(function() {\n  return this || (typeof window !== 'undefined' ? window : global);\n}());\n"]}