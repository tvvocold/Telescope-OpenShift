{"version":3,"sources":["telescope-base/lib/base.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oF;;AAEA,2F;AACA,qB;AACA,yB;AACA,yB;AACA,qB;;AAEA,4B;AACA,6G;AACA,6G;AACA,G;AACA,uF;;AAEA,gB;AACA,G;AACA,a;AACA,oB;AACA,I;AACA,G;AACA,a;AACA,qB;AACA,I;AACA,G;AACA,a;AACA,qB;AACA,G;AACA,C;;AAEA,iB;AACA,kB;AACA,kB;;AAEA,uF;;;AAGA,wE;AACA,c;AACA,G;AACA,0B;AACA,a;AACA,I;AACA,G;AACA,0B;AACA,a;AACA,G;AACA,E;;AAEA,gB;AACA,G;AACA,yB;AACA,a;AACA,I;AACA,G;AACA,iC;AACA,a;AACA,I;AACA,G;AACA,6B;AACA,a;AACA,G;AACA,E;;AAEA,2C;AACA,a;AACA,G;AACA,2B;AACA,qB;AACA,4C;AACA,I;AACA,G;AACA,6B;AACA,uB;AACA,yC;AACA,I;AACA,G;AACA,uB;AACA,mB;AACA,kC;AACA,I;AACA,G;AACA,sB;AACA,sB;AACA,2C;AACA,G;AACA,E;;AAEA,2C;AACA,a;AACA,G;AACA,uB;AACA,iB;AACA,qC;AACA,I;AACA,G;AACA,uB;AACA,iB;AACA,+B;AACA,I;AACA,G;AACA,wB;AACA,kB;AACA,4C;AACA,G;AACA,E;;AAEA,kF;;;AAGA,8C;AACA,oB;;AAEA,8E;AACA,iC;AACA,S;AACA,2B;AACA,I;AACA,Y;AACA,a;AACA,G;AACA,E;;AAEA,uC;AACA,U;AACA,4C;AACA,I;AACA,C;;AAEA,uC;AACA,U;AACA,+C;AACA,I;AACA,C;;AAEA,wC;AACA,U;AACA,gD;AACA,I;AACA,C;;AAEA,2C;AACA,U;AACA,W;AACA,e;AACA,M;AACA,qC;AACA,oB;AACA,I;AACA,C;;AAEA,6C;AACA,U;AACA,yC;AACA,mC;AACA,I;AACA,C;;AAEA,6C;AACA,U;AACA,iC;AACA,6C;AACA,I;AACA,C;;AAEA,oD;AACA,gD;AACA,4D;AACA,U;AACA,mF;AACA,6C;AACA,I;AACA,C;;AAEA,sD;AACA,gD;AACA,8D;AACA,wE;AACA,U;AACA,iC;AACA,6C;AACA,I;AACA,C;;AAEA,iB;;AAEA,mB;;AAEA,mB;;AAEA,e;AACA,G;AACA,yB;AACA,Y;AACA,I;AACA,G;AACA,2B;AACA,a;AACA,I;AACA,G;AACA,4B;AACA,a;AACA,I;AACA,G;AACA,4B;AACA,a;AACA,I;AACA,G;AACA,4B;AACA,a;AACA,I;AACA,G;AACA,4B;AACA,a;AACA,G;AACA,E;;AAEA,mB;;AAEA,e;AACA,G;AACA,0B;AACA,a;AACA,I;AACA,G;AACA,2B;AACA,a;AACA,G;AACA,E;;AAEA,Y;AACA,G;AACA,2B;AACA,a;AACA,I;AACA,G;AACA,yB;AACA,a;AACA,I;AACA,G;AACA,iC;AACA,a;AACA,I;AACA,G;AACA,0B;AACA,a;AACA,G;AACA,C;AACA,6E;;AAEA,wB;;AAEA,+B;AACA,+B;AACA,wE;;AAEA,uD;AACA,uF;AACA,gE;;AAEA,0B;;AAEA,2B;;AAEA,oC;AACA,kC;AACA,kC;AACA,uC;;AAEA,kC;AACA,gC;AACA,gD;AACA,qD;;AAEA,+B;AACA,6B;AACA,0B;AACA,+B;;AAEA,qB;AACA,uB;;AAEA,0F;;AAEA,sB;AACA,G;AACA,yB;AACA,Y;AACA,I;AACA,G;AACA,0B;AACA,Y;AACA,I;AACA,G;AACA,iC;AACA,Y;AACA,I;AACA,G;AACA,mC;AACA,Y;AACA,I;AACA,G;AACA,6B;AACA,Y;AACA,G;AACA,E;;AAEA,mB;AACA,G;AACA,4B;AACA,Y;AACA,G;AACA,C;;AAEA,+B;AACA,kB;AACA,mD;AACA,G;AACA,E;;AAEA,qF;;;AAGA,c;;AAEA,+B;AACA,6E;AACA,oD;AACA,C;;AAEA,kF;;AAEA,iB;AACA,yE;AACA,E;;AAEA,iF;;AAEA,iD;AACA,0B","file":"/packages/telescope-base.js","sourcesContent":["// ------------------------------------- Schemas -------------------------------- //\n\n// array containing properties to be added to the post/settings/comments schema on startup.\naddToPostSchema = [];\naddToCommentsSchema = [];\naddToSettingsSchema = [];\naddToUserSchema = [];\n\nSimpleSchema.extendOptions({\n  editable: Match.Optional(Boolean),  // editable: true means the field can be edited by the document's owner\n  hidden: Match.Optional(Boolean)     // hidden: true means the field is never shown in a form no matter what\n});\n// ----------------------------------- Posts Statuses ------------------------------ //\n\npostStatuses = [\n  {\n    value: 1,\n    label: 'Pending'\n  },\n  {\n    value: 2,\n    label: 'Approved'\n  },\n  {\n    value: 3,\n    label: 'Rejected'\n  }\n]\n\nSTATUS_PENDING=1;\nSTATUS_APPROVED=2;\nSTATUS_REJECTED=3;\n\n// ------------------------------------- Navigation -------------------------------- //\n\n\n// array containing nav items; initialize with views menu and admin menu\nprimaryNav = [\n  {\n    template: 'viewsMenu',\n    order: 10\n  },\n  {\n    template: 'adminMenu',\n    order: 20\n  }\n];\n\nsecondaryNav = [\n  {\n    template: 'userMenu',\n    order: 10\n  },\n  {\n    template:'notificationsMenu',\n    order: 20\n  },\n  {\n    template: 'submitButton',\n    order: 30\n  }\n];\n\n// array containing items in the admin menu\nadminMenu = [\n  {\n    route: 'posts_pending',\n    label: 'Pending',\n    description: 'posts_awaiting_moderation'\n  },\n  {\n    route: 'posts_scheduled',\n    label: 'Scheduled',\n    description: 'future_scheduled_posts'\n  },\n  {\n    route: 'all-users',\n    label: 'Users',\n    description: 'users_dashboard'\n  },\n  {\n    route: 'settings',\n    label: 'Settings',\n    description: 'telescope_settings_panel'\n  }\n];\n\n// array containing items in the views menu\nviewsMenu = [\n  {\n    route: 'posts_top',\n    label: 'top',\n    description: 'most_popular_posts'\n  },\n  {\n    route: 'posts_new',\n    label: 'new',\n    description: 'newest_posts'\n  },\n  {\n    route: 'posts_best',\n    label: 'best',\n    description: 'highest_ranked_posts_ever'\n  }\n];\n\n// ------------------------------------- Views -------------------------------- //\n\n\n// object containing post list view parameters\nviewParameters = {};\n\n// will be common to all other view unless specific properties are overwritten\nviewParameters.baseParameters = {\n  find: {\n    status: STATUS_APPROVED\n  },\n  options: {\n    limit: 10\n  }\n};\n\nviewParameters.top = function (terms) {\n  return {\n    options: {sort: {sticky: -1, score: -1}}\n  };\n}\n\nviewParameters.new = function (terms) {\n  return {\n    options: {sort: {sticky: -1, postedAt: -1}}\n  };\n}\n\nviewParameters.best = function (terms) {\n  return {\n    options: {sort: {sticky: -1, baseScore: -1}}\n  };\n}\n\nviewParameters.pending = function (terms) {\n  return {\n    find: {\n      status: 1\n    },\n    options: {sort: {createdAt: -1}},\n    showFuture: true\n  };\n}\n\nviewParameters.scheduled = function (terms) {\n  return {\n    find: {postedAt: {$gte: new Date()}},\n    options: {sort: {postedAt: -1}}\n  };\n}\n\nviewParameters.userPosts = function (terms) {\n  return {\n    find: {userId: terms.userId},\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n}\n\nviewParameters.userUpvotedPosts = function (terms) {\n  var user = Meteor.users.findOne(terms.userId);\n  var postsIds = _.pluck(user.votes.upvotedPosts, \"itemId\");\n  return {\n    find: {_id: {$in: postsIds}, userId: {$ne: terms.userId}}, // exclude own posts\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n}\n\nviewParameters.userDownvotedPosts = function (terms) {\n  var user = Meteor.users.findOne(terms.userId);\n  var postsIds = _.pluck(user.votes.downvotedPosts, \"itemId\");\n  // TODO: sort based on votedAt timestamp and not postedAt, if possible\n  return {\n    find: {_id: {$in: postsIds}},\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n}\n\nheroModules = [];\n\nfooterModules = [];\n\nthreadModules = [];\n\npostModules = [\n  {\n    template: 'postRank',\n    order: 1\n  },\n  {\n    template: 'postUpvote',\n    order: 10\n  },\n  {\n    template: 'postContent',\n    order: 20\n  },\n  {\n    template: 'postAvatars',\n    order: 30\n  },\n  {\n    template: 'postDiscuss',\n    order: 40\n  },\n  {\n    template: 'postActions',\n    order: 50\n  }\n];\n\npostThumbnail = [];\n\npostHeading = [\n  {\n    template: 'postTitle',\n    order: 10\n  },\n  {\n    template: 'postDomain',\n    order: 20\n  }\n];\n\npostMeta = [\n  {\n    template: 'postAuthor',\n    order: 10\n  },\n  {\n    template: 'postInfo',\n    order: 20\n  },\n  {\n    template: 'postCommentsLink',\n    order: 30\n  },\n  {\n    template: 'postAdmin',\n    order: 50\n  }\n]\n// ------------------------------ Callbacks ------------------------------ //\n\npostClassCallbacks = [];\n\npostSubmitClientCallbacks = [];\npostSubmitMethodCallbacks = [];\npostAfterSubmitMethodCallbacks = []; // runs on server only in a timeout\n\npostEditClientCallbacks = []; // loops over post object\npostEditMethodCallbacks = []; // loops over modifier (i.e. \"{$set: {foo: bar}}\") object\npostAfterEditMethodCallbacks = []; // loops over modifier object\n\npostApproveCallbacks = [];\n\ncommentClassCallbacks = [];\n\ncommentSubmitRenderedCallbacks = [];\ncommentSubmitClientCallbacks = [];\ncommentSubmitMethodCallbacks = [];\ncommentAfterSubmitMethodCallbacks = [];\n\ncommentEditRenderedCallbacks = [];\ncommentEditClientCallbacks = [];\ncommentEditMethodCallbacks = []; // not used yet\ncommentAfterEditMethodCallbacks = []; // not used yet\n\nuserEditRenderedCallbacks = [];\nuserEditClientCallbacks = [];\nuserCreatedCallbacks = [];\nuserProfileCompleteChecks = [];\n\nupvoteCallbacks = [];\ndownvoteCallbacks = [];\n\n// ------------------------------------- User Profiles -------------------------------- //\n\nuserProfileDisplay = [\n  {\n    template: 'userInfo',\n    order: 1\n  },\n  {\n    template: 'userPosts',\n    order: 2\n  },\n  {\n    template: 'userUpvotedPosts',\n    order: 3\n  },\n  {\n    template: 'userDownvotedPosts',\n    order: 5\n  },\n  {\n    template: 'userComments',\n    order: 5\n  }\n];\n\nuserProfileEdit = [\n  {\n    template: 'userAccount',\n    order: 1\n  }\n]\n\nuserProfileCompleteChecks.push(\n  function(user) {\n    return !!getEmail(user) && !!getUserName(user);\n  }\n);\n\n// ------------------------------ Dynamic Templates ------------------------------ //\n\n\ntemplates = {}\n\ngetTemplate = function (name) {\n  // if template has been overwritten, return this; else return template name\n  return !!templates[name] ? templates[name] : name;\n}\n\n// ------------------------------ Theme Settings ------------------------------ //\n\nthemeSettings = {\n  'useDropdowns': true // whether or not to use dropdown menus in a theme\n};\n\n// ------------------------------ Subscriptions ------------------------------ //\n\n// array containing subscriptions to be preloaded\npreloadSubscriptions = [];"]}