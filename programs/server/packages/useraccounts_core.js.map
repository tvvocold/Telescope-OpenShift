{"version":3,"sources":["useraccounts:core/lib/field.js","useraccounts:core/lib/core.js","useraccounts:core/lib/server.js","useraccounts:core/lib/methods.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,oF;;AAEA,e;;AAEA,oF;;;AAGA,wB;AACA,4B;AACA,4B;;AAEA,6C;AACA,wC;AACA,E;;AAEA,oB;AACA,6C;AACA,qC;AACA,M;AACA,oB;AACA,6C;AACA,oC;AACA,c;AACA,M;;AAEA,2C;AACA,iC;AACA,uB;AACA,+B;AACA,qC;AACA,qB;AACA,8B;AACA,qC;AACA,qB;AACA,mE;AACA,kB;AACA,6B;AACA,uB;AACA,oC;AACA,uB;AACA,oC;AACA,iB;AACA,E;;AAEA,oB;AACA,qD;AACA,kC;AACA,2B;AACA,4C;AACA,gB;AACA,0B;AACA,kB;AACA,M;;AAEA,oB;AACA,qD;AACA,2C;AACA,oC;AACA,uE;AACA,yB;AACA,mC;AACA,2B;AACA,M;;AAEA,uC;AACA,6B;AACA,E;;AAEA,oB;AACA,0D;AACA,qC;AACA,sF;AACA,kC;AACA,uF;AACA,iE;AACA,M;;AAEA,oB;AACA,2C;AACA,4D;AACA,M;;AAEA,oB;AACA,yC;AACA,uD;AACA,wB;AACA,qD;AACA,wB;AACA,uD;AACA,wB;AACA,M;;AAEA,oB;AACA,6C;AACA,sE;AACA,M;;AAEA,oB;AACA,2C;AACA,gC;AACA,sE;AACA,4B;AACA,kE;AACA,8B;AACA,oE;AACA,M;;AAEA,oB;AACA,8C;AACA,qC;AACA,M;;AAEA,oB;AACA,6C;AACA,mD;AACA,4C;AACA,M;AACA,oB;AACA,6C;AACA,oC;AACA,e;AACA,M;;AAEA,oB;AACA,4C;AACA,sC;AACA,M;AACA,oB;AACA,4C;AACA,oC;AACA,e;AACA,M;;;AAGA,oB;AACA,oD;AACA,8B;AACA,0C;AACA,M;AACA,oB;AACA,oD;AACA,oC;AACA,e;AACA,M;;AAEA,oB;AACA,iE;AACA,uC;AACA,8E;AACA,mB;AACA,S;AACA,oC;AACA,wF;AACA,mB;AACA,S;AACA,+D;AACA,M;;AAEA,oD;AACA,0D;AACA,6B;AACA,uB;AACA,gB;AACA,sB;AACA,gC;AACA,gD;AACA,0C;AACA,wC;AACA,a;AACA,kB;AACA,kC;AACA,0C;AACA,6B;AACA,a;AACA,S;AACA,c;AACA,+B;AACA,sC;AACA,wB;AACA,S;AACA,K;AACA,mC;AACA,mC;AACA,+C;AACA,+D;AACA,kC;AACA,uD;AACA,K;AACA,mC;AACA,+C;AACA,8D;AACA,kC;AACA,sD;AACA,K;AACA,0D;AACA,mC;AACA,kC;AACA,2B;AACA,K;AACA,kC;AACA,sC;AACA,iE;AACA,iC;AACA,uB;AACA,6B;AACA,kC;AACA,mB;AACA,K;AACA,sB;AACA,8B;AACA,iB;AACA,E;;;;;;;;;;;;;;;;;;;ACnNA,oF;;AAEA,mC;;AAEA,oF;;AAEA,a;AACA,sC;AACA,0C;AACA,sC;AACA,qC;AACA,mC;AACA,mC;AACA,E;;AAEA,c;AACA,2C;AACA,wC;AACA,E;;AAEA,Y;AACA,sC;AACA,0C;AACA,uC;AACA,qC;AACA,mC;AACA,8C;AACA,E;;AAEA,mB;AACA,yC;AACA,qC;AACA,uC;AACA,E;;AAEA,gD;AACA,qB;AACA,wC;AACA,6B;AACA,O;AACA,gB;AACA,G;;AAEA,a;AACA,sC;AACA,uC;AACA,sC;AACA,uC;AACA,mC;AACA,gD;AACA,0C;AACA,wC;AACA,yC;AACA,yC;AACA,gC;AACA,2C;AACA,4C;AACA,4C;AACA,2C;AACA,4C;AACA,4C;AACA,sC;AACA,4C;AACA,qD;AACA,yC;AACA,yC;AACA,yC;AACA,uC;AACA,0C;AACA,yC;AACA,qC;AACA,uC;AACA,qC;AACA,E;;AAEA,iD;AACA,c;AACA,gB;AACA,6C;AACA,yC;AACA,kD;AACA,sD;AACA,yD;AACA,iD;AACA,mD;AACA,uE;;AAEA,iB;AACA,0C;AACA,mD;AACA,oD;AACA,wC;AACA,8C;AACA,4C;AACA,4C;;AAEA,6B;AACA,kD;AACA,8C;AACA,gD;AACA,gD;AACA,8C;AACA,4C;;AAEA,sC;AACA,uC;AACA,qC;;AAEA,gB;AACA,0C;AACA,4C;;AAEA,Y;AACA,2C;AACA,2C;;AAEA,qC;AACA,E;;;AAGA,iB;AACA,sC;AACA,sC;AACA,0C;AACA,sC;AACA,qC;AACA,mC;AACA,mC;AACA,E;;;AAGA,gB;AACA,a;AACA,gB;AACA,iB;AACA,sC;AACA,oE;AACA,oE;AACA,+D;AACA,6C;AACA,6C;AACA,+B;AACA,oD;AACA,mC;;AAEA,6B;AACA,kD;AACA,8C;AACA,gD;AACA,gD;AACA,8C;;AAEA,iB;AACA,kC;AACA,uC;AACA,uC;AACA,E;;AAEA,uD;AACA,iB;AACA,iC;AACA,iC;AACA,qC;AACA,2C;AACA,6E;AACA,E;;;AAGA,gF;;AAEA,2B;;AAEA,gF;;;;AAIA,sB;AACA,sB;AACA,sB;;AAEA,c;AACA,iB;;AAEA,E;;;;;AAKA,E;AACA,iE;AACA,uE;AACA,iE;AACA,sG;AACA,gH;AACA,0G;AACA,0F;AACA,0F;AACA,8E;AACA,2E;AACA,sG;AACA,E;;;;AAIA,E;AACA,4G;AACA,oG;AACA,4F;AACA,4F;AACA,kF;AACA,4E;AACA,kH;AACA,E;;;AAGA,gE;AACA,8B;AACA,0E;AACA,yE;AACA,4D;AACA,0E;AACA,yE;AACA,kE;AACA,kE;AACA,uE;AACA,E;;;;AAIA,sB;AACA,4B;AACA,e;AACA,Y;AACA,a;AACA,e;AACA,Y;AACA,a;AACA,U;AACA,W;AACA,U;AACA,E;;AAEA,+B;AACA,wB;AACA,iB;AACA,+B;AACA,iC;AACA,kC;AACA,qB;AACA,2B;;AAEA,gB;AACA,0B;AACA,2B;AACA,gC;AACA,uC;AACA,8B;AACA,iC;AACA,8B;;AAEA,6B;AACA,kC;AACA,8B;AACA,gC;AACA,gC;AACA,8B;AACA,4B;;AAEA,sC;AACA,0B;AACA,wB;;AAEA,gB;AACA,uB;AACA,uC;;AAEA,Y;AACA,4B;AACA,E;;AAEA,+B;AACA,qB;AACA,yB;AACA,E;;AAEA,yB;AACA,wB;AACA,e;AACA,qB;AACA,sB;AACA,uB;AACA,wB;AACA,mB;AACA,8B;AACA,2C;AACA,U;AACA,gC;AACA,O;AACA,e;AACA,wB;AACA,yB;AACA,uB;AACA,qB;AACA,sB;AACA,kC;AACA,qC;AACA,oC;AACA,U;AACA,sB;AACA,kC;AACA,qC;AACA,oC;AACA,U;AACA,O;AACA,E;;AAEA,oB;AACA,yB;;AAEA,kC;;AAEA,wB;AACA,kD;AACA,qD;AACA,E;;AAEA,yC;AACA,qD;AACA,0B;AACA,+G;AACA,6C;AACA,4B;AACA,yD;AACA,kE;AACA,4E;AACA,2B;AACA,4C;AACA,oD;AACA,kD;AACA,uE;AACA,wE;AACA,kD;AACA,uE;AACA,wE;AACA,6D;AACA,8H;AACA,mF;;AAEA,yE;AACA,4C;AACA,wB;AACA,E;;AAEA,2C;AACA,W;AACA,0E;AACA,wD;AACA,iB;AACA,qF;AACA,K;AACA,a;AACA,sC;AACA,iC;AACA,iB;AACA,U;AACA,qF;AACA,wB;AACA,E;;AAEA,2C;AACA,kE;AACA,0B;AACA,4F;;AAEA,wC;AACA,8B;AACA,0C;AACA,qD;;AAEA,yB;AACA,2C;AACA,0B;AACA,qC;AACA,8G;AACA,6D;;AAEA,+B;AACA,oD;AACA,gF;AACA,a;AACA,+B;AACA,oD;AACA,gF;AACA,a;AACA,6B;AACA,kD;AACA,0E;AACA,a;AACA,mC;AACA,wD;AACA,4F;AACA,a;AACA,oC;AACA,yD;AACA,+F;AACA,a;AACA,8B;AACA,mD;AACA,6E;AACA,a;AACA,S;AACA,K;AACA,E;;AAEA,wD;AACA,yB;AACA,sD;AACA,+B;AACA,iE;AACA,0B;AACA,+F;AACA,4C;AACA,uC;AACA,0C;;AAEA,qD;AACA,2D;AACA,0C;AACA,wC;AACA,mE;AACA,iC;AACA,E;;AAEA,2C;AACA,oC;AACA,E;;AAEA,2C;AACA,uD;AACA,oC;AACA,O;AACA,uD;AACA,E;;AAEA,qC;AACA,wB;AACA,E;;AAEA,uC;AACA,wC;AACA,E;;AAEA,6C;AACA,6B;AACA,uC;AACA,gB;AACA,E;;AAEA,6C;AACA,6B;AACA,uC;AACA,e;AACA,E;;AAEA,wC;AACA,2C;AACA,c;AACA,wB;AACA,wE;AACA,Q;AACA,8G;AACA,4C;AACA,gC;AACA,2C;AACA,mG;;AAEA,2F;AACA,+C;AACA,gB;AACA,uB;AACA,6D;AACA,U;AACA,O;;AAEA,4D;AACA,wD;AACA,gF;;AAEA,4E;AACA,2B;AACA,wD;AACA,sC;AACA,W;AACA,K;;AAEA,6B;AACA,oD;AACA,2B;AACA,O;;AAEA,oB;AACA,E;;AAEA,8C;AACA,uD;AACA,0B;AACA,kH;AACA,gD;AACA,iE;AACA,qB;AACA,gD;AACA,Q;AACA,2E;AACA,8E;AACA,E;;AAEA,uC;AACA,yB;AACA,kH;AACA,4G;AACA,oI;AACA,iD;AACA,oD;AACA,mF;AACA,0D;AACA,sE;AACA,c;AACA,S;AACA,iD;AACA,yD;AACA,6F;AACA,0D;AACA,2E;AACA,c;AACA,S;AACA,+C;AACA,uD;AACA,yF;AACA,wD;AACA,yE;AACA,c;AACA,S;AACA,K;;AAEA,sG;AACA,iG;;AAEA,8D;AACA,uC;AACA,mB;AACA,qF;AACA,iG;AACA,uF;AACA,mG;AACA,wF;AACA,oG;AACA,0F;AACA,uG;AACA,6H;AACA,S;;AAEA,uD;AACA,uD;AACA,4D;AACA,qE;;AAEA,wC;AACA,6E;AACA,mC;AACA,wC;AACA,oC;AACA,+B;AACA,uC;AACA,mD;AACA,gD;AACA,0D;AACA,oC;AACA,sB;AACA,+C;AACA,4D;AACA,2D;AACA,oE;AACA,iE;AACA,sF;AACA,uH;AACA,+B;AACA,2B;AACA,sB;AACA,wC;AACA,uD;AACA,sB;AACA,mB;AACA,gB;AACA,oC;AACA,+B;AACA,uC;AACA,mD;AACA,uC;AACA,8E;AACA,oC;AACA,sB;AACA,gD;AACA,0D;AACA,oC;AACA,sB;AACA,wC;AACA,uD;AACA,4D;AACA,qB;AACA,mB;AACA,S;AACA,Y;AACA,gC;AACA,2B;AACA,mC;AACA,+C;AACA,4C;AACA,6D;AACA,oE;AACA,wB;AACA,0D;AACA,gC;AACA,kB;AACA,oC;AACA,mD;AACA,iB;AACA,e;AACA,O;AACA,E;;;;;;;;;;;;;;;;;;;ACpnBA,iB;;AAEA,gC;AACA,2H;AACA,E;;AAEA,iC;AACA,0B;AACA,e;;AAEA,6D;AACA,yG;AACA,qF;;AAEA,4C;AACA,6C;AACA,kB;AACA,8D;AACA,qC;AACA,sE;;AAEA,kE;AACA,uD;AACA,6C;AACA,uC;AACA,4B;AACA,0F;AACA,uC;AACA,8D;AACA,e;AACA,mC;AACA,oE;AACA,sB;AACA,iC;AACA,yC;AACA,sG;AACA,c;AACA,yB;AACA,gC;AACA,gG;AACA,S;AACA,K;AACA,S;AACA,wB;AACA,gE;AACA,6E;AACA,K;;AAEA,6E;AACA,qC;AACA,4C;AACA,sF;AACA,oB;AACA,0C;AACA,6D;AACA,qC;AACA,sE;AACA,c;AACA,wB;AACA,wD;AACA,wD;AACA,2B;AACA,4E;AACA,kF;AACA,6B;AACA,oC;AACA,yE;AACA,uE;AACA,a;AACA,c;AACA,W;AACA,K;;AAEA,qB;AACA,0C;AACA,wD;AACA,+B;AACA,kD;AACA,mF;AACA,mE;AACA,a;AACA,mC;AACA,W;AACA,K;;AAEA,qF;AACA,qD;AACA,wE;AACA,4B;AACA,iC;AACA,sB;AACA,4B;AACA,0B;AACA,gE;AACA,4B;AACA,8D;AACA,oD;AACA,iB;AACA,sD;AACA,6B;AACA,a;AACA,kB;AACA,oF;AACA,sD;AACA,kC;AACA,sB;AACA,yB;AACA,iC;AACA,2B;AACA,a;AACA,oB;AACA,mH;AACA,wB;AACA,W;AACA,K;;AAEA,mB;AACA,oC;AACA,M;AACA,kE;AACA,+B;AACA,+C;AACA,2B;AACA,gC;AACA,qC;AACA,oD;AACA,6E;AACA,kB;AACA,gB;AACA,W;AACA,mB;AACA,oC;;AAEA,6C;AACA,6B;AACA,E;;AAEA,6B;;;AAGA,uD;AACA,iD;AACA,wD;AACA,E;AACA,gC;AACA,2C;AACA,S;AACA,iB;AACA,qC;AACA,G;;;AAGA,iB;AACA,0B;AACA,8B;AACA,G;;;;;;;;;;;;;;;;;;;;AC1JA,gB;AACA,4C;AACA,iC;AACA,oB;AACA,oD;AACA,iF;AACA,kC;AACA,0F;AACA,2B;AACA,mD;AACA,yD;AACA,S;AACA,M;AACA,G;;;AAGA,sB;AACA,oB;AACA,8C;AACA,sE;AACA,4F;AACA,+C;AACA,mC;AACA,8D;AACA,sD;AACA,0C;AACA,mD;AACA,uE;AACA,sC;AACA,8C;AACA,iC;AACA,uD;AACA,8B;AACA,iD;AACA,iC;AACA,uD;AACA,sC;AACA,kC;;AAEA,sC;AACA,kE;AACA,wC;AACA,gD;AACA,4C;AACA,kD;AACA,6E;AACA,iE;AACA,yC;AACA,2B;AACA,iB;AACA,oE;AACA,oC;AACA,8D;AACA,qC;AACA,iB;AACA,e;AACA,0B;AACA,mF;;AAEA,iD;AACA,2C;AACA,uC;;AAEA,yD;AACA,sD;AACA,oF;AACA,yE;AACA,yB;AACA,wE;;AAEA,qF;AACA,kE;AACA,iF;AACA,sE;AACA,U;AACA,O;AACA,C","file":"/packages/useraccounts:core.js","sourcesContent":["// ---------------------------------------------------------------------------------\n\n// Field object\n\n// ---------------------------------------------------------------------------------\n\n\nField = function(field){\n    check(field, FIELD_PAT);\n    _.defaults(this, field);\n\n    this.validating = new ReactiveVar(false);\n    this.status = new ReactiveVar(null);\n};\n\nif (Meteor.isClient)\n    Field.prototype.clearStatus = function(){\n        return this.status.set(null);\n    };\nif (Meteor.isServer)\n    Field.prototype.clearStatus = function(){\n        // Nothing to do server-side\n        return\n    };\n\nField.prototype.fixValue = function(value){\n    if (this.type === \"checkbox\")\n        return !!value;\n    if (this.type === \"select\")\n        // TODO: something working...\n        return value;\n    if (this.type === \"radio\")\n        // TODO: something working...\n        return value;\n    // Possibly applies required transformations to the input value\n    if (this.trim)\n        value = value.trim();\n    if (this.lowercase)\n        value = value.toLowerCase();\n    if (this.uppercase)\n        value = value.toUpperCase();\n    return value;\n};\n\nif (Meteor.isClient)\n    Field.prototype.getDisplayName = function(state){\n        var dN = this.displayName;\n        if (_.isObject(dN))\n            dN = dN[state] || dN[\"default\"];\n        if (!dN)\n            dN = this._id;\n        return dN;\n    };\n\nif (Meteor.isClient)\n    Field.prototype.getPlaceholder = function(state){\n        var placeholder = this.placeholder;\n        if (_.isObject(placeholder))\n            placeholder = placeholder[state] || placeholder[\"default\"];\n        if (!placeholder)\n            placeholder = this._id;\n        return placeholder;\n    };\n\nField.prototype.getStatus = function(){\n    return this.status.get();\n};\n\nif (Meteor.isClient)\n    Field.prototype.getValue = function(tempalteInstance){\n        if (this.type === \"checkbox\")\n            return !!(tempalteInstance.$(\"#at-field-\" + this._id + \":checked\").val());\n        if (this.type === \"radio\")\n            return tempalteInstance.$(\"[name=at-field-\"+ this._id + \"]:checked\").val();\n        return tempalteInstance.$(\"#at-field-\" + this._id).val();\n    };\n\nif (Meteor.isClient)\n    Field.prototype.hasError = function() {\n        return this.negativeValidation && this.status.get();\n    };\n\nif (Meteor.isClient)\n    Field.prototype.hasIcon = function(){\n        if (this.showValidating && this.isValidating())\n            return true;\n        if (this.negativeFeedback && this.hasError())\n            return true;\n        if (this.positiveFeedback && this.hasSuccess())\n            return true;\n    };\n\nif (Meteor.isClient)\n    Field.prototype.hasSuccess = function() {\n        return this.positiveValidation && this.status.get() === false;\n    };\n\nif (Meteor.isClient)\n    Field.prototype.iconClass = function(){\n        if (this.isValidating())\n            return AccountsTemplates.texts.inputIcons[\"isValidating\"];\n        if (this.hasError())\n            return AccountsTemplates.texts.inputIcons[\"hasError\"];\n        if (this.hasSuccess())\n            return AccountsTemplates.texts.inputIcons[\"hasSuccess\"];\n    };\n\nif (Meteor.isClient)\n    Field.prototype.isValidating = function(){\n        return this.validating.get();\n    };\n\nif (Meteor.isClient)\n    Field.prototype.setError = function(err){\n        check(err, Match.OneOf(String, undefined));\n        return this.status.set(err || true);\n    };\nif (Meteor.isServer)\n    Field.prototype.setError = function(err){\n        // Nothing to do server-side\n        return;\n    };\n\nif (Meteor.isClient)\n    Field.prototype.setSuccess = function(){\n        return this.status.set(false);\n    };\nif (Meteor.isServer)\n    Field.prototype.setSuccess = function(){\n        // Nothing to do server-side\n        return;\n    };\n\n\nif (Meteor.isClient)\n    Field.prototype.setValidating = function(state){\n        check(state, Boolean);\n        return this.validating.set(state);\n    };\nif (Meteor.isServer)\n    Field.prototype.setValidating = function(state){\n        // Nothing to do server-side\n        return;\n    };\n\nif (Meteor.isClient)\n    Field.prototype.setValue = function(tempalteInstance, value){\n        if (this.type === \"checkbox\") {\n            tempalteInstance.$(\"#at-field-\" + this._id).prop('checked', true);\n            return;\n        }\n        if (this.type === \"radio\") {\n            tempalteInstance.$(\"[name=at-field-\"+ this._id + \"]\").prop('checked', true);\n            return;\n        }\n        tempalteInstance.$(\"#at-field-\" + this._id).val(value);\n    };\n\nField.prototype.validate = function(value, strict) {\n    check(value, Match.OneOf(undefined, String, Boolean));\n    this.setValidating(true);\n    this.clearStatus();\n    if (!value){\n        if (!!strict){\n            if (this.required) {\n                this.setError(\"Required Field\");\n                this.setValidating(false);\n                return \"Required Field\";\n            }\n            else {\n                this.setSuccess();\n                this.setValidating(false);\n                return false;\n            }\n        }\n        else {\n            this.clearStatus();\n            this.setValidating(false);\n            return null;\n        }\n    }\n    var valueLength = value.length;\n    var minLength = this.minLength;\n    if (minLength && valueLength < minLength) {\n        this.setError(\"Minimum required length: \" + minLength);\n        this.setValidating(false);\n        return \"Minimum required length: \" + minLength;\n    }\n    var maxLength = this.maxLength;\n    if (maxLength && valueLength > maxLength) {\n        this.setError(\"Maximum allowed length: \" + maxLength);\n        this.setValidating(false);\n        return \"Maximum allowed length: \" + maxLength;\n    }\n    if (this.re && valueLength && !value.match(this.re)) {\n        this.setError(this.errStr);\n        this.setValidating(false);\n        return this.errStr;\n    }\n    if (this.func && valueLength){\n        var result = this.func(value);\n        var err = result === true ? this.errStr || true : result;\n        if (result === undefined)\n            return err;\n        this.status.set(err);\n        this.setValidating(false);\n        return err;\n    }\n    this.setSuccess();\n    this.setValidating(false);\n    return false;\n};\n","// ---------------------------------------------------------------------------------\n\n// Patterns for methods\" parameters\n\n// ---------------------------------------------------------------------------------\n\nSTATE_PAT = {\n    changePwd: Match.Optional(String),\n    enrollAccount: Match.Optional(String),\n    forgotPwd: Match.Optional(String),\n    resetPwd: Match.Optional(String),\n    signIn: Match.Optional(String),\n    signUp: Match.Optional(String),\n};\n\nERRORS_PAT = {\n    mustBeLoggedIn: Match.Optional(String),\n    pwdMismatch: Match.Optional(String),\n};\n\nINFO_PAT = {\n    emailSent: Match.Optional(String),\n    emailVerified: Match.Optional(String),\n    pwdChanged: Match.Optional(String),\n    pwdReset: Match.Optional(String),\n    pwdSet: Match.Optional(String),\n    signUpVerifyEmail: Match.Optional(String),\n};\n\nINPUT_ICONS_PAT = {\n    isValidating: Match.Optional(String),\n    hasError: Match.Optional(String),\n    hasSuccess: Match.Optional(String),\n};\n\nObjWithStringValues = Match.Where(function (x) {\n    check(x, Object);\n    _.each(_.values(x), function(value){\n        check(value, String);\n    });\n    return true;\n});\n\nTEXTS_PAT = {\n    button: Match.Optional(STATE_PAT),\n    errors: Match.Optional(ERRORS_PAT),\n    navSignIn: Match.Optional(String),\n    navSignOut: Match.Optional(String),\n    info: Match.Optional(INFO_PAT),\n    inputIcons: Match.Optional(INPUT_ICONS_PAT),\n    optionalField: Match.Optional(String),\n    pwdLink_pre: Match.Optional(String),\n    pwdLink_link: Match.Optional(String),\n    pwdLink_suff: Match.Optional(String),\n    sep: Match.Optional(String),\n    signInLink_pre: Match.Optional(String),\n    signInLink_link: Match.Optional(String),\n    signInLink_suff: Match.Optional(String),\n    signUpLink_pre: Match.Optional(String),\n    signUpLink_link: Match.Optional(String),\n    signUpLink_suff: Match.Optional(String),\n    socialAdd: Match.Optional(String),\n    socialConfigure: Match.Optional(String),\n    socialIcons: Match.Optional(ObjWithStringValues),\n    socialRemove: Match.Optional(String),\n    socialSignIn: Match.Optional(String),\n    socialSignUp: Match.Optional(String),\n    socialWith: Match.Optional(String),\n    termsPreamble: Match.Optional(String),\n    termsPrivacy: Match.Optional(String),\n    termsAnd: Match.Optional(String),\n    termsTerms: Match.Optional(String),\n    title: Match.Optional(STATE_PAT),\n};\n\n// Configuration pattern to be checked with check\nCONFIG_PAT = {\n    // Behaviour\n    confirmPassword: Match.Optional(Boolean),\n    defaultState: Match.Optional(String),\n    enablePasswordChange: Match.Optional(Boolean),\n    enforceEmailVerification: Match.Optional(Boolean),\n    forbidClientAccountCreation: Match.Optional(Boolean),\n    overrideLoginErrors: Match.Optional(Boolean),\n    sendVerificationEmail: Match.Optional(Boolean),\n    socialLoginStyle: Match.Optional(Match.OneOf(\"popup\", \"redirect\")),\n\n    // Appearance\n    defaultLayout: Match.Optional(String),\n    showAddRemoveServices: Match.Optional(Boolean),\n    showForgotPasswordLink: Match.Optional(Boolean),\n    showLabels: Match.Optional(Boolean),\n    showPlaceholders: Match.Optional(Boolean),\n    hideSignInLink: Match.Optional(Boolean),\n    hideSignUpLink: Match.Optional(Boolean),\n\n    // Client-side Validation\n    continuousValidation: Match.Optional(Boolean),\n    negativeFeedback: Match.Optional(Boolean),\n    negativeValidation: Match.Optional(Boolean),\n    positiveValidation: Match.Optional(Boolean),\n    positiveFeedback: Match.Optional(Boolean),\n    showValidating: Match.Optional(Boolean),\n\n    // Privacy Policy and Terms of Use\n    privacyUrl: Match.Optional(String),\n    termsUrl: Match.Optional(String),\n\n    // Redirects\n    homeRoutePath: Match.Optional(String),\n    redirectTimeout: Match.Optional(Number),\n\n    // Hooks\n    onSubmitHook: Match.Optional(Function),\n    onLogoutHook: Match.Optional(Function),\n\n    texts: Match.Optional(TEXTS_PAT),\n};\n\n\nFIELD_SUB_PAT = {\n    \"default\": Match.Optional(String),\n    changePwd: Match.Optional(String),\n    enrollAccount: Match.Optional(String),\n    forgotPwd: Match.Optional(String),\n    resetPwd: Match.Optional(String),\n    signIn: Match.Optional(String),\n    signUp: Match.Optional(String),\n};\n\n\n// Field pattern\nFIELD_PAT = {\n    _id: String,\n    type: String,\n    required: Match.Optional(Boolean),\n    displayName: Match.Optional(Match.OneOf(String, FIELD_SUB_PAT)),\n    placeholder: Match.Optional(Match.OneOf(String, FIELD_SUB_PAT)),\n    select: Match.Optional([{text: String, value: Match.Any}]),\n    minLength: Match.Optional(Match.Integer),\n    maxLength: Match.Optional(Match.Integer),\n    re: Match.Optional(RegExp),\n    func: Match.Optional(Match.Where(_.isFunction)),\n    errStr: Match.Optional(String),\n\n    // Client-side Validation\n    continuousValidation: Match.Optional(Boolean),\n    negativeFeedback: Match.Optional(Boolean),\n    negativeValidation: Match.Optional(Boolean),\n    positiveValidation: Match.Optional(Boolean),\n    positiveFeedback: Match.Optional(Boolean),\n\n    // Transforms\n    trim: Match.Optional(Boolean),\n    lowercase: Match.Optional(Boolean),\n    uppercase: Match.Optional(Boolean),\n};\n\n// Route configuration pattern to be checked with check\nvar ROUTE_PAT = {\n    name: Match.Optional(String),\n    path: Match.Optional(String),\n    template: Match.Optional(String),\n    layoutTemplate: Match.Optional(String),\n    redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n};\n\n\n// -----------------------------------------------------------------------------\n\n// AccountsTemplates object\n\n// -----------------------------------------------------------------------------\n\n\n\n// -------------------\n// Client/Server stuff\n// -------------------\n\n// Constructor\nAT = function() {\n\n};\n\n\n\n\n/*\n    Each field object is represented by the following properties:\n        _id:         String   (required)  // A unique field\"s id / name\n        type:        String   (required)  // Displayed input type\n        required:    Boolean  (optional)  // Specifies Whether to fail or not when field is left empty\n        displayName: String   (optional)  // The field\"s name to be displayed as a label above the input element\n        placeholder: String   (optional)  // The placeholder text to be displayed inside the input element\n        minLength:   Integer  (optional)  // Possibly specifies the minimum allowed length\n        maxLength:   Integer  (optional)  // Possibly specifies the maximum allowed length\n        re:          RegExp   (optional)  // Regular expression for validation\n        func:        Function (optional)  // Custom function for validation\n        errStr:      String   (optional)  // Error message to be displayed in case re validation fails\n*/\n\n\n\n/*\n    Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the\n    following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);\n        name:           String (optional). A unique route\"s name to be passed to iron-router\n        path:           String (optional). A unique route\"s path to be passed to iron-router\n        template:       String (optional). The name of the template to be rendered\n        layoutTemplate: String (optional). The name of the layout to be used\n        redirect:       String (optional). The name of the route (or its path) where to redirect after form submit\n*/\n\n\n// Allowed routes along with theirs default configuration values\nAT.prototype.ROUTE_DEFAULT = {\n    changePwd:      { name: \"atChangePwd\",      path: \"/change-password\"},\n    enrollAccount:  { name: \"atEnrollAccount\",  path: \"/enroll-account\"},\n    ensureSignedIn: { name: \"atEnsureSignedIn\", path: null},\n    forgotPwd:      { name: \"atForgotPwd\",      path: \"/forgot-password\"},\n    resetPwd:       { name: \"atResetPwd\",       path: \"/reset-password\"},\n    signIn:         { name: \"atSignIn\",         path: \"/sign-in\"},\n    signUp:         { name: \"atSignUp\",         path: \"/sign-up\"},\n    verifyEmail:    { name: \"atVerifyEmail\",    path: \"/verify-email\"},\n};\n\n\n\n// Allowed input types\nAT.prototype.INPUT_TYPES = [\n    \"checkbox\",\n    \"email\",\n    \"hidden\",\n    \"password\",\n    \"radio\",\n    \"select\",\n    \"tel\",\n    \"text\",\n    \"url\",\n];\n\n// Current configuration values\nAT.prototype.options = {\n    // Appearance\n    //defaultLayout: undefined,\n    showAddRemoveServices: false,\n    showForgotPasswordLink: false,\n    showLabels: true,\n    showPlaceholders: true,\n\n    // Behaviour\n    confirmPassword: true,\n    defaultState: \"signIn\",\n    enablePasswordChange: false,\n    forbidClientAccountCreation: false,\n    overrideLoginErrors: true,\n    sendVerificationEmail: false,\n    socialLoginStyle: \"popup\",\n\n    // Client-side Validation\n    //continuousValidation: false,\n    //negativeFeedback: false,\n    //negativeValidation: false,\n    //positiveValidation: false,\n    //positiveFeedback: false,\n    //showValidating: false,\n\n    // Privacy Policy and Terms of Use\n    privacyUrl: undefined,\n    termsUrl: undefined,\n\n    // Redirects\n    homeRoutePath: \"/\",\n    redirectTimeout: 2000, // 2 seconds\n\n    // Hooks\n    onSubmitHook: undefined,\n};\n\nAT.prototype.SPECIAL_FIELDS = [\n    \"password_again\",\n    \"username_and_email\",\n];\n\n// SignIn / SignUp fields\nAT.prototype._fields = [\n    new Field({\n        _id: \"email\",\n        type: \"email\",\n        required: true,\n        lowercase: true,\n        trim: true,\n        func: function(email){\n            return !_.contains(email, '@');\n        },\n        errStr: 'Invalid email',\n    }),\n    new Field({\n        _id: \"password\",\n        type: \"password\",\n        required: true,\n        minLength: 6,\n        displayName: {\n            \"default\": \"password\",\n            changePwd: \"newPassword\",\n            resetPwd: \"newPassword\",\n        },\n        placeholder: {\n            \"default\": \"password\",\n            changePwd: \"newPassword\",\n            resetPwd: \"newPassword\",\n        },\n    }),\n];\n\n// Configured routes\nAT.prototype.routes = {};\n\nAT.prototype._initialized = false;\n\n// Input type validation\nAT.prototype._isValidInputType = function(value) {\n    return _.indexOf(this.INPUT_TYPES, value) !== -1;\n};\n\nAT.prototype.addField = function(field) {\n    // Fields can be added only before initialization\n    if (this._initialized)\n        throw new Error(\"AccountsTemplates.addField should strictly be called before AccountsTemplates.init!\");\n    field = _.pick(field, _.keys(FIELD_PAT));\n    check(field, FIELD_PAT);\n    // Checks there\"s currently no field called field._id\n    if (_.indexOf(_.pluck(this._fields, \"_id\"), field._id) !== -1)\n        throw new Error(\"A field called \" + field._id + \" already exists!\");\n    // Validates field.type\n    if (!this._isValidInputType(field.type))\n        throw new Error(\"field.type is not valid!\");\n    // Checks field.minLength is strictly positive\n    if (typeof field.minLength !== \"undefined\" && field.minLength <= 0)\n        throw new Error(\"field.minLength should be greater than zero!\");\n    // Checks field.maxLength is strictly positive\n    if (typeof field.maxLength !== \"undefined\" && field.maxLength <= 0)\n        throw new Error(\"field.maxLength should be greater than zero!\");\n    // Checks field.maxLength is greater than field.minLength\n    if (typeof field.minLength !== \"undefined\" && typeof field.minLength !== \"undefined\" && field.maxLength < field.minLength)\n        throw new Error(\"field.maxLength should be greater than field.maxLength!\");\n\n    if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, field._id)))\n        this._fields.push(new Field(field));\n    return this._fields;\n};\n\nAT.prototype.addFields = function(fields) {\n    var ok;\n    try { // don\"t bother with `typeof` - just access `length` and `catch`\n        ok = fields.length > 0 && \"0\" in Object(fields);\n    } catch (e) {\n        throw new Error(\"field argument should be an array of valid field objects!\");\n    }\n    if (ok) {\n        _.map(fields, function(field){\n            this.addField(field);\n        }, this);\n    } else\n        throw new Error(\"field argument should be an array of valid field objects!\");\n    return this._fields;\n};\n\nAT.prototype.configure = function(config) {\n    // Configuration options can be set only before initialization\n    if (this._initialized)\n        throw new Error(\"Configuration options must be set before AccountsTemplates.init!\");\n\n    // Updates the current configuration\n    check(config, CONFIG_PAT);\n    var options = _.omit(config, \"texts\");\n    this.options = _.defaults(options, this.options);\n\n    if (Meteor.isClient){\n        // Possibly sets up client texts...\n        if (config.texts){\n            var texts = config.texts;\n            var simpleTexts = _.omit(texts, \"button\", \"errors\", \"info\", \"inputIcons\", \"socialIcons\", \"title\");\n            this.texts = _.defaults(simpleTexts, this.texts);\n\n            if (texts.button) {\n                // Updates the current button object\n                this.texts.button = _.defaults(texts.button, this.texts.button);\n            }\n            if (texts.errors) {\n                // Updates the current errors object\n                this.texts.errors = _.defaults(texts.errors, this.texts.errors);\n            }\n            if (texts.info) {\n                // Updates the current info object\n                this.texts.info = _.defaults(texts.info, this.texts.info);\n            }\n            if (texts.inputIcons) {\n                // Updates the current inputIcons object\n                this.texts.inputIcons = _.defaults(texts.inputIcons, this.texts.inputIcons);\n            }\n            if (texts.socialIcons) {\n                // Updates the current socialIcons object\n                this.texts.socialIcons = _.defaults(texts.socialIcons, this.texts.socialIcons);\n            }\n            if (texts.title) {\n                // Updates the current title object\n                this.texts.title = _.defaults(texts.title, this.texts.title);\n            }\n        }\n    }\n};\n\nAT.prototype.configureRoute = function(route, options) {\n    check(route, String);\n    check(options, Match.OneOf(undefined, ROUTE_PAT));\n    options = _.clone(options);\n    // Route Configuration can be done only before initialization\n    if (this._initialized)\n        throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");\n    // Only allowed routes can be configured\n    if (!(route in this.ROUTE_DEFAULT))\n        throw new Error(\"Unknown Route!\");\n\n    // Possibly adds a initial / to the provided path\n    if (options && options.path && options.path[0] !== \"/\")\n        options.path = \"/\" + options.path;\n    // Updates the current configuration\n    options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);\n    this.routes[route] = options;\n};\n\nAT.prototype.hasField = function(fieldId) {\n    return !!this.getField(fieldId);\n};\n\nAT.prototype.getField = function(fieldId) {\n    var field = _.filter(this._fields, function(field){\n        return field._id == fieldId;\n    });\n    return (field.length === 1) ? field[0] : undefined;\n};\n\nAT.prototype.getFields = function() {\n    return this._fields;\n};\n\nAT.prototype.getFieldIds = function() {\n    return _.pluck(this._fields, \"_id\");\n};\n\nAT.prototype.getRouteName = function(route) {\n    if (route in this.routes)\n        return this.routes[route].name;\n    return null;\n};\n\nAT.prototype.getRoutePath = function(route) {\n    if (route in this.routes)\n        return this.routes[route].path;\n    return \"#\";\n};\n\nAT.prototype.oauthServices = function(){\n    // Extracts names of available services\n    var names;\n    if (Meteor.isServer)\n        names = (Accounts.oauth && Accounts.oauth.serviceNames()) || [];\n    else\n        names = (Accounts.oauth && Accounts.loginServicesConfigured() && Accounts.oauth.serviceNames()) || [];\n    // Extracts names of configured services\n    var configuredServices = [];\n    if (Accounts.loginServiceConfiguration)\n        configuredServices = _.pluck(Accounts.loginServiceConfiguration.find().fetch(), \"service\");\n\n    // Builds a list of objects containing service name as _id and its configuration status\n    var services = _.map(names, function(name){\n        return {\n            _id : name,\n            configured: _.contains(configuredServices, name),\n        };\n    });\n\n    // Checks whether there is a UI to configure services...\n    // XXX: this only works with the accounts-ui package\n    var showUnconfigured = typeof Accounts._loginButtonsSession !== \"undefined\";\n\n    // Filters out unconfigured services in case they\"re not to be displayed\n    if (!showUnconfigured){\n        services = _.filter(services, function(service){\n            return service.configured;\n        });\n    }\n\n    // Sorts services by name\n    services = _.sortBy(services, function(service){\n        return service._id;\n    });\n\n    return services;\n};\n\nAT.prototype.removeField = function(fieldId) {\n    // Fields can be removed only before initialization\n    if (this._initialized)\n        throw new Error(\"AccountsTemplates.removeField should strictly be called before AccountsTemplates.init!\");\n    // Tries to look up the field with given _id\n    var index = _.indexOf(_.pluck(this._fields, \"_id\"), fieldId);\n    if (index !== -1)\n        return this._fields.splice(index, 1)[0];\n    else\n        if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, fieldId)))\n            throw new Error(\"A field called \" + fieldId + \" does not exist!\");\n};\n\nAT.prototype.setupRoutes = function() {\n    if (Meteor.isServer){\n        // Possibly prints a warning in case showForgotPasswordLink is set to true but the route is not configured\n        if (AccountsTemplates.options.showForgotPasswordLink && !(\"forgotPwd\" in  AccountsTemplates.routes))\n            console.warn(\"[AccountsTemplates] WARNING: showForgotPasswordLink set to true, but forgotPwd route is not configured!\");\n        // Configures \"reset password\" email link\n        if (\"resetPwd\" in AccountsTemplates.routes){\n            var resetPwdPath = AccountsTemplates.routes[\"resetPwd\"].path.substr(1);\n            Accounts.urls.resetPassword = function(token){\n                return Meteor.absoluteUrl(resetPwdPath + \"/\" + token);\n            };\n        }\n        // Configures \"enroll account\" email link\n        if (\"enrollAccount\" in AccountsTemplates.routes){\n            var enrollAccountPath = AccountsTemplates.routes[\"enrollAccount\"].path.substr(1);\n            Accounts.urls.enrollAccount = function(token){\n                return Meteor.absoluteUrl(enrollAccountPath + \"/\" + token);\n            };\n        }\n        // Configures \"verify email\" email link\n        if (\"verifyEmail\" in AccountsTemplates.routes){\n            var verifyEmailPath = AccountsTemplates.routes[\"verifyEmail\"].path.substr(1);\n            Accounts.urls.verifyEmail = function(token){\n                return Meteor.absoluteUrl(verifyEmailPath + \"/\" + token);\n            };\n        }\n    }\n\n    // Determines the default layout to be used in case no specific one is specified for single routes\n    var defaultLayout = AccountsTemplates.options.defaultLayout || Router.options.layoutTemplate;\n\n    _.each(AccountsTemplates.routes, function(options, route){\n        if (route === \"ensureSignedIn\")\n            return;\n        if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange)\n            throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");\n        if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink)\n            throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");\n        if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation)\n            throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");\n        // Possibly prints a warning in case the MAIL_URL environment variable was not set\n        if (Meteor.isServer && route === \"forgotPwd\" && (!process.env.MAIL_URL || ! Package[\"email\"])){\n            console.warn(\"[AccountsTemplates] WARNING: showForgotPasswordLink set to true, but MAIL_URL is not configured!\");\n        }\n\n        var name = options.name; // Default provided...\n        var path = options.path; // Default provided...\n        var template = options.template || \"fullPageAtForm\";\n        var layoutTemplate = options.layoutTemplate || defaultLayout;\n\n        // Possibly adds token parameter\n        if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)){\n            path += \"/:paramToken\";\n            if (route === \"verifyEmail\")\n                Router.route(path, {\n                    name: name,\n                    template: template,\n                    layoutTemplate: layoutTemplate,\n                    onBeforeAction: function() {\n                        AccountsTemplates.setState(route);\n                        this.next();\n                    },\n                    onAfterAction: function() {\n                        AccountsTemplates.setDisabled(true);\n                        var token = this.params.paramToken;\n                        Accounts.verifyEmail(token, function(error){\n                            AccountsTemplates.setDisabled(false);\n                            AccountsTemplates.submitCallback(error, route, function(){\n                                AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailVerified);\n                            });\n                        });\n                    },\n                    onStop: function() {\n                        AccountsTemplates.clearState();\n                    },\n                });\n            else\n                Router.route(path, {\n                    name: name,\n                    template: template,\n                    layoutTemplate: layoutTemplate,\n                    onRun: function() {\n                        AccountsTemplates.paramToken = this.params.paramToken;\n                        this.next();\n                    },\n                    onBeforeAction: function() {\n                        AccountsTemplates.setState(route);\n                        this.next();\n                    },\n                    onStop: function() {\n                        AccountsTemplates.clearState();\n                        AccountsTemplates.paramToken = null;\n                    }\n                });\n        }\n        else\n            Router.route(path, {\n                name: name,\n                template: template,\n                layoutTemplate: layoutTemplate,\n                onBeforeAction: function() {\n                    if(Meteor.user() && route != 'changePwd')\n                        AccountsTemplates.postSubmitRedirect(route);\n                    else\n                        AccountsTemplates.setState(route);\n                    this.next();\n                },\n                onStop: function() {\n                    AccountsTemplates.clearState();\n                }\n            });\n    });\n};\n","// Initialization\n\nAT.prototype.init = function() {\n    console.warn(\"[AccountsTemplates] There is no more need to call AccountsTemplates.init()! Simply remove the call ;-)\");\n};\n\nAT.prototype._init = function() {\n    if (this._initialized)\n        return;\n\n    // Checks there is at least one account service installed\n    if (!Package[\"accounts-password\"] && (!Accounts.oauth || Accounts.oauth.serviceNames().length === 0))\n        throw Error(\"AccountsTemplates: You must add at least one account service!\");\n\n    // A password field is strictly required\n    var password = this.getField(\"password\");\n    if (!password)\n        throw Error(\"A password field is strictly required!\");\n    if (password.type !== \"password\")\n        throw Error(\"The type of password field should be password!\");\n\n    // Then we can have \"username\" or \"email\" or even both of them\n    // but at least one of the two is strictly required\n    var username = this.getField(\"username\");\n    var email = this.getField(\"email\");\n    if (!username && !email)\n        throw Error(\"At least one field out of username and email is strictly required!\");\n    if (username && !username.required)\n        throw Error(\"The username field should be required!\");\n    if (email){\n        if (email.type !== \"email\")\n            throw Error(\"The type of email field should be email!\");\n        if (username){\n            // username and email\n            if (username.type !== \"text\")\n                throw Error(\"The type of username field should be text when email field is present!\");\n        }else{\n            // email only\n            if (!email.required)\n                throw Error(\"The email field should be required when username is not present!\");\n        }\n    }\n    else{\n        // username only\n        if (username.type !== \"text\" && username.type !== \"tel\")\n            throw Error(\"The type of username field should be text or tel!\");\n    }\n\n    // Possibly publish more user data in order to be able to show add/remove\n    // buttons for 3rd-party services\n    if (this.options.showAddRemoveServices){\n        // Publish additional current user info to get the list of registered services\n        // XXX TODO:\n        // ...adds only user.services.*.id\n        Meteor.publish(\"userRegisteredServices\", function() {\n            var userId = this.userId;\n            return Meteor.users.find(userId, {fields: {services: 1}});\n            /*\n            if (userId){\n                var user = Meteor.users.findOne(userId);\n                var services_id = _.chain(user.services)\n                    .keys()\n                    .reject(function(service){return service === \"resume\";})\n                    .map(function(service){return \"services.\" + service + \".id\";})\n                    .value();\n                var projection = {};\n                _.each(services_id, function(key){projection[key] = 1;});\n                return Meteor.users.find(userId, {fields: projection});\n            }\n            */\n        });\n    }\n\n    // Security stuff\n    if (this.options.overrideLoginErrors){\n        Accounts.validateLoginAttempt(function(attempt){\n            if (attempt.error){\n                var reason = attempt.error.reason;\n                if (reason === \"User not found\" || reason === \"Incorrect password\")\n                    throw new Meteor.Error(403, \"Login forbidden\");\n            }\n            return attempt.allowed;\n        });\n    }\n\n    if (this.options.sendVerificationEmail && this.options.enforceEmailVerification){\n        Accounts.validateLoginAttempt(function(info){\n            if (info.type !== \"password\" || info.methodName !== \"login\")\n                return true;\n            var user = info.user;\n            if (!user)\n                return true;\n            var ok = true;\n            var loginEmail = info.methodArguments[0].user.email;\n            if (loginEmail){\n              var email = _.filter(user.emails, function(obj){\n                  return obj.address === loginEmail;\n              });\n              if (!email.length || !email[0].verified)\n                  ok = false;\n            }\n            else {\n              // we got the username, lets check there's at lease one verified email\n              var emailVerified = _.chain(user.emails)\n                .pluck('verified')\n                .any()\n                .value();\n              if (!emailVerified)\n                ok = false;\n            }\n            if (!ok)\n              throw new Meteor.Error(401, \"Please verify your email first. Check the email and follow the link!\" );\n            return true;\n        });\n    }\n\n    // ------------\n    // Server-Side Routes Definition\n    //\n    //   this allows for server-side iron-router usage, like, e.g.\n    //   Router.map(function(){\n    //       this.route(\"fullPageSigninForm\", {\n    //           path: \"*\",\n    //           where: \"server\"\n    //           action: function() {\n    //               this.response.statusCode = 404;\n    //               return this.response.end(Handlebars.templates[\"404\"]());\n    //           }\n    //       });\n    //   })\n    // ------------\n    AccountsTemplates.setupRoutes();\n\n    // Marks AccountsTemplates as initialized\n    this._initialized = true;\n};\n\nAccountsTemplates = new AT();\n\n\n// Client side account creation is disabled by default:\n// the methos ATCreateUserServer is used instead!\n// to actually disable client side account creation use:\n//\n//    AccountsTemplates.config({\n//        forbidClientAccountCreation: true\n//    });\nAccounts.config({\n    forbidClientAccountCreation: true\n});\n\n\n// Initialization\nMeteor.startup(function(){\n    AccountsTemplates._init();\n});\n","\nMeteor.methods({\n    ATRemoveService: function(service_name){\n        var userId = this.userId;\n        if (userId){\n            var user = Meteor.users.findOne(userId);\n            var numServices = _.keys(user.services).length; // including \"resume\"\n            if (numServices === 2)\n                throw new Meteor.Error(403, \"Cannot remove the only active service!\", {});\n            var unset = {};\n            unset[\"services.\" + service_name] = \"\";\n            Meteor.users.update(userId, {$unset: unset});\n        }\n    },\n});\n\n\nif (Meteor.isServer) {\n    Meteor.methods({\n        ATCreateUserServer: function(options){\n            if (AccountsTemplates.options.forbidClientAccountCreation)\n                throw new Meteor.Error(403, \"Client side accounts creation is disabled!!!\");\n            // createUser() does more checking.\n            check(options, Object);\n            var allFieldIds = AccountsTemplates.getFieldIds();\n            // Picks-up whitelisted fields for profile\n            var profile = options.profile;\n            profile = _.pick(profile, allFieldIds);\n            profile = _.omit(profile, \"username\", \"email\", \"password\");\n            // Validates fields\" value\n            var signupInfo = _.clone(profile);\n            if (options.username)\n                signupInfo.username = options.username;\n            if (options.email)\n                signupInfo.email = options.email;\n            if (options.password)\n                signupInfo.password = options.password;\n            var validationErrors = {};\n            var someError = false;\n\n            // Validates fields values\n            _.each(AccountsTemplates.getFields(), function(field){\n                var fieldId = field._id;\n                var value = signupInfo[fieldId];\n                if (fieldId === \"password\"){\n                    // Can\"t Pick-up password here\n                    // NOTE: at this stage the password is already encripted,\n                    //       so there is no way to validate it!!!\n                    check(value, Object);\n                    return;\n                }\n                var validationErr = field.validate(value, \"strict\");\n                if (validationErr) {\n                    validationErrors[fieldId] = validationErr;\n                    someError = true;\n                }\n            });\n            if (someError)\n                throw new Meteor.Error(403, \"Validation Errors\", validationErrors);\n\n            // Possibly removes the profile field\n            if (_.isEmpty(options.profile))\n                delete options.profile;\n\n            // Create user. result contains id and token.\n            var userId = Accounts.createUser(options);\n            // safety belt. createUser is supposed to throw on error. send 500 error\n            // instead of sending a verification email with empty userid.\n            if (! userId)\n                throw new Error(\"createUser failed to insert new user\");\n\n            // Send a email address verification email in case the context permits it\n            // and the specific configuration flag was set to true\n            if (options.email && AccountsTemplates.options.sendVerificationEmail)\n                Accounts.sendVerificationEmail(userId, options.email);\n        },\n    });\n}"]}