{"version":3,"file":"/packages/jparker:gravatar.js","sources":["jparker:gravatar/gravatar.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,kC;AACA,Y;;AAEA,I;AACA,2D;AACA,2B;AACA,8E;AACA,qC;AACA,iD;AACA,I;AACA,gC;AACA,qC;AACA,G;;AAEA,I;AACA,mD;AACA,sD;AACA,8B;AACA,iD;AACA,qB;AACA,I;AACA,2B;AACA,kB;AACA,0D;AACA,G;;AAEA,I;AACA,2D;AACA,oD;AACA,wC;AACA,iD;AACA,I;AACA,yB;AACA,kB;AACA,2D;AACA,G;;AAEA,I;AACA,4E;AACA,yD;AACA,uD;AACA,wE;AACA,kB;AACA,8E;AACA,yE;AACA,2D;AACA,I;AACA,2C;AACA,kB;AACA,0B;;AAEA,iB;AACA,4B;AACA,0C;AACA,qC;;AAEA,2B;AACA,iC;AACA,sB;AACA,U;AACA,iC;AACA,G;;AAEA,wB;;AAEA,+B;AACA,kD;AACA,8C;AACA,e;;AAEA,0B;AACA,uB;AACA,G;;AAEA,a;AACA,E;AACA,E","sourcesContent":["/* global Gravatar, CryptoJS, _ */\nGravatar = {\n\n\t/**\n\t * `cleantString` remove starting and trailing whitespaces\n\t * and lowercase the input\n\t * @param  {String} string input string that may contain leading and trailing\n\t * whitespaces and uppercase letters\n\t * @return {String}        output cleaned string\n\t */\n\tcleanString: function(string) {\n\t\treturn string.trim().toLowerCase();\n\t},\n\n\t/**\n\t * `isHash` check if a string match the MD5 form :\n\t * 32 chars string containing letters from `a` to `f`\n\t * and digits from `0` to `9`\n\t * @param  {String}  string that might be a hash\n\t * @return {Boolean}\n\t */\n\tisHash: function(string) {\n\t\tvar self = this;\n\t\treturn /^[a-f0-9]{32}$/i.test(self.cleanString(string));\n\t},\n\n\t/**\n\t * `hash` takes an input and run it through `CryptoJS.MD5`\n\t * @see https://atmospherejs.com/jparker/crypto-md5\n\t * @param  {String} string input string\n\t * @return {String}        md5 hash of the input\n\t */\n\thash: function(string) {\n\t\tvar self = this;\n\t\treturn CryptoJS.MD5(self.cleanString(string)).toString();\n\t},\n\n\t/**\n\t * `imageUrl` will provide the url for the avatar, given an email or a hash\n\t * and a set of options to be passed to the gravatar API\n\t * @see https://en.gravatar.com/site/implement/images/\n\t * @param  {String} emailOrHash email or pregenerated MD5 hash to query\n\t * gravatar with.\n\t * @param  {Object} options     options to be passed to gravatar in the query\n\t * string. The `secure` will be used to determine which base url to use.\n\t * @return {String}             complete url to the avatar\n\t */\n\timageUrl: function(emailOrHash, options) {\n\t\tvar self = this;\n\t\toptions = options || {};\n\n\t\t// Want HTTPS ?\n\t\tvar url = options.secure ?\n\t\t\t'https://secure.gravatar.com/avatar/' :\n\t\t\t'http://www.gravatar.com/avatar/';\n\n\t\t// Is it an MD5 already ?\n\t\tif (self.isHash(emailOrHash)) {\n\t\t\turl += emailOrHash;\n\t\t} else {\n\t\t\turl += self.hash(emailOrHash);\n\t\t}\n\n\t\tdelete options.secure;\n\n\t\t// Have any options to pass ?\n\t\tvar params = _.map(options, function(val, key) {\n\t\t\treturn key + '=' + encodeURIComponent(val);\n\t\t}).join('&');\n\n\t\tif (params.length > 0) {\n\t\t\turl += '?' + params;\n\t\t}\n\n\t\treturn url;\n\t}\n};\n"]}