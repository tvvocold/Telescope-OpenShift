{"version":3,"sources":["telescope-embedly//home/action/workspace/Telescope/packages/telescope-embedly/package-tap.i18n","telescope-embedly/lib/embedly.js","telescope-embedly/lib/server/get_embedly_data.js","telescope-embedly//home/action/workspace/Telescope/packages/telescope-embedly/i18n/en.i18n.json","telescope-embedly//home/action/workspace/Telescope/packages/telescope-embedly/i18n/fr.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,yB;AACA,+B;AACA,mB;AACA,iB;AACA,uB;AACA,mB;AACA,e;AACA,qB;AACA,qC;AACA,K;AACA,G;AACA,C;AACA,wC;;AAEA,qB;AACA,wB;AACA,mB;AACA,iB;AACA,mB;AACA,mB;AACA,iB;AACA,e;AACA,gB;AACA,K;AACA,G;AACA,C;AACA,oC;;AAEA,oB;AACA,6B;AACA,W;AACA,G;;AAEA,0B;AACA,6B;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,uB;AACA,mB;AACA,K;AACA,G;AACA,C;AACA,6C;;AAEA,8B;AACA,iC;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,G;AACA,C;AACA,iD;;AAEA,+B;AACA,kC;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,G;AACA,C;AACA,kD;;AAEA,uE;AACA,mD;AACA,8E;AACA,0C;AACA,G;;;;;;;;;;;;;;;;;;AC1EA,iC;AACA,e;AACA,oD;AACA,4C;AACA,yD;AACA,2D;;AAEA,mB;AACA,gE;AACA,4H;AACA,gB;AACA,G;;AAEA,O;AACA,I;AACA,+C;AACA,e;AACA,wB;AACA,iB;AACA,oC;AACA,sC;AACA,4B;AACA,O;AACA,O;;AAEA,0B;;AAEA,gG;AACA,mG;;AAEA,gF;;AAEA,mB;AACA,sB;AACA,2G;AACA,8D;AACA,8E;AACA,gB;AACA,G;AACA,C;;AAEA,uF;AACA,yD;;AAEA,8G;AACA,2C;AACA,kB;AACA,2C;AACA,oB;AACA,8D;AACA,sD;AACA,gD;AACA,kC;AACA,8B;AACA,kC;AACA,Q;AACA,M;AACA,iB;AACA,I;AACA,oD;;AAEA,qE;AACA,2C;AACA,e;AACA,e;AACA,wC;AACA,iB;AACA,2D;AACA,sD;AACA,8C;AACA,6C;AACA,O;AACA,+B;AACA,8B;AACA,gC;AACA,+B;AACA,O;AACA,K;AACA,G;AACA,sC;AACA,c;AACA,C;AACA,yD;;AAEA,gE;AACA,iD;AACA,8B;AACA,e;AACA,wC;AACA,mC;AACA,0C;AACA,G;AACA,sB;AACA,C;AACA,gD;;;AAGA,gB;AACA,sC;AACA,oC;AACA,I;AACA,kC;AACA,+B;AACA,I;AACA,iC;AACA,sC;AACA,I;AACA,0C;AACA,wC;AACA,gC;AACA,K;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;AChHA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,4Q;;;;;;;;;;;;;;;;;;;ACRA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,+Q","file":"/packages/telescope-embedly.js","sourcesContent":["TAPi18n.packages[\"telescope-embedly\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","var thumbnailProperty = {\n  propertyName: 'thumbnailUrl',\n  propertySchema: {\n    type: String,\n    label: 'thumbnail',\n    optional: true,\n    autoform: {\n      editable: true,\n      type: 'bootstrap-postthumbnail'\n    }\n  }\n}\naddToPostSchema.push(thumbnailProperty);\n\nvar mediaProperty = {\n  propertyName: 'media',\n  propertySchema: {\n    type: Object,\n    optional: true,\n    blackbox: true,\n    hidden: true,\n    autoform: {\n      omit: true\n    }\n  }\n}\naddToPostSchema.push(mediaProperty);\n\npostThumbnail.push({\n  template: 'postThumbnail', \n  order: 15\n});\n\nvar embedlyKeyProperty = {\n  propertyName: 'embedlyKey',\n  propertySchema: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'embedly',\n      private: true\n    }\n  }\n}\naddToSettingsSchema.push(embedlyKeyProperty);\n\nvar thumbnailWidthProperty = {\n  propertyName: 'thumbnailWidth',\n  propertySchema: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: 'embedly'\n    }\n  }\n}\naddToSettingsSchema.push(thumbnailWidthProperty);\n\nvar thumbnailHeightProperty = {\n  propertyName: 'thumbnailHeight',\n  propertySchema: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: 'embedly'\n    }\n  }\n}\naddToSettingsSchema.push(thumbnailHeightProperty);\n\n// add callback that adds \"has-thumbnail\" or \"no-thumbnail\" CSS classes\npostClassCallbacks.push(function (post, postClass){\n  var thumbnailClass = !!post.thumbnailUrl ? \"has-thumbnail\" : \"no-thumbnail\";\n  return postClass + \" \" + thumbnailClass;\n});","getEmbedlyData = function (url) {\n  var data = {}\n  var extractBase = 'http://api.embed.ly/1/extract';\n  var embedlyKey = getSetting('embedlyKey');\n  var thumbnailWidth = getSetting('thumbnailWidth', 200);\n  var thumbnailHeight = getSetting('thumbnailHeight', 125);\n\n  if(!embedlyKey) {\n    // fail silently to still let the post be submitted as usual\n    console.log(\"Couldn't find an Embedly API key! Please add it to your Telescope settings or remove the Embedly module.\");\n    return null;\n  }\n\n  try {\n    \n    var result = Meteor.http.get(extractBase, {\n      params: {\n        key: embedlyKey,\n        url: url,\n        image_width: thumbnailWidth,\n        image_height: thumbnailHeight,\n        image_method: 'crop'\n      }\n    });\n\n    // console.log(result)\n\n    if (!!result.data.images && !!result.data.images.length) // there may not always be an image\n      result.data.thumbnailUrl = result.data.images[0].url; // add thumbnailUrl as its own property\n\n    return _.pick(result.data, 'title', 'media', 'description', 'thumbnailUrl');\n\n  } catch (error) {\n    console.log(error)\n    // the first 13 characters of the Embedly errors are \"failed [400] \", so remove them and parse the rest\n    var errorObject = JSON.parse(error.message.substring(13));\n    throw new Meteor.Error(errorObject.error_code, errorObject.error_message);\n    return null;\n  }\n}\n\n// For security reason, we use a separate server-side API call to set the media object,\n// and the thumbnail object if it hasn't already been set\n\n// note: the following function is not used because it would hold up the post submission, use next one instead\n// var addMediaOnSubmit = function (post) {\n//   if(post.url){\n//     var data = getEmbedlyData(post.url);\n//     if (!!data) {\n//       // only add a thumbnailUrl if there isn't one already\n//       if(!post.thumbnailUrl && !!data.thumbnailUrl)\n//         post.thumbnailUrl = data.thumbnailUrl\n//       // add media if necessary\n//       if(!!data.media.html)\n//         post.media = data.media\n//     }\n//   }\n//   return post;\n// }\n// postSubmitMethodCallbacks.push(addMediaOnSubmit);\n\n// Async variant that directly modifies the post object with update()\nvar addMediaAfterSubmit = function (post) {\n  var set = {};\n  if(post.url){\n    var data = getEmbedlyData(post.url);\n    if (!!data) {\n      // only add a thumbnailUrl if there isn't one already\n      if (!post.thumbnailUrl && !!data.thumbnailUrl) {\n        post.thumbnailUrl = data.thumbnailUrl;\n        set.thumbnailUrl = data.thumbnailUrl;\n      }\n      // add media if necessary\n      if (!!data.media.html) {\n        post.media = data.media;\n        set.media = data.media;\n      }\n    }\n  }\n  Posts.update(post._id, {$set: set});\n  return post;\n}\npostAfterSubmitMethodCallbacks.push(addMediaAfterSubmit);\n\n// TODO: find a way to only do this is URL has actually changed?\nvar updateMediaOnEdit = function (updateObject) {\n  var post = updateObject.$set\n  if(post.url){\n    var data = getEmbedlyData(post.url);\n    if(!!data && !!data.media.html)\n      updateObject.$set.media = data.media\n  }\n  return updateObject;\n}\npostEditMethodCallbacks.push(updateMediaOnEdit);\n\n\nMeteor.methods({\n  testGetEmbedlyData: function (url) {\n    console.log(getEmbedlyData(url))\n  },\n  getEmbedlyData: function (url) {\n    return getEmbedlyData(url);\n  },\n  embedlyKeyExists: function () {\n    return !!getSetting('embedlyKey');\n  },\n  regenerateEmbedlyData: function (post) {\n    if (can.edit(Meteor.user(), post)) {\n      addMediaAfterSubmit(post);\n    }\n  }\n});","var _ = Package.underscore._,\n    package_name = \"telescope-embedly\",\n    namespace = \"telescope-embedly\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \nTAPi18n.addResourceBundle(\"en\", namespace, {\"thumbnail\":\"Thumbnail\",\"thumbnailUrl\":\"Thumbnail\",\"regenerate_thumbnail\":\"Regenerate Thumbnail\",\"clear_thumbnail\":\"Clear Thumbnail\",\"please_fill_in_embedly_key\":\"Please fill in your Embedly API key to enable thumbnails.\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope-embedly\",\n    namespace = \"telescope-embedly\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"fr\"])) {\n  TAPi18n.translations[\"fr\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"fr\"][namespace])) {\n  TAPi18n.translations[\"fr\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"fr\"][namespace], {\"thumbnail\":\"Aperçu\",\"thumbnailUrl\":\"Aperçu\",\"regenerate_thumbnail\":\"Regenerer l'aperçu\",\"clear_thumbnail\":\"Effacer l'aperçu\",\"please_fill_in_embedly_key\":\"Veuillez fournir une clé API Embedly pour activer les aperçus.\"});\n"]}